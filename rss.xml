<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>藏器于身</title>
        <subtitle>待时而动</subtitle>
        <icon>https://gality.cn/images/favicon.ico</icon>
        <link>https://gality.cn</link>
        <author>
          <name>Gality</name>
        </author>
        <description>安全杂记 &amp; 日常随感</description>
        <language>zh-CN</language>
        <pubDate>Wed, 20 Sep 2023 17:31:28 +0800</pubDate>
        <lastBuildDate>Wed, 20 Sep 2023 17:31:28 +0800</lastBuildDate>
        <category term="网络安全" />
        <category term=" 二进制安全" />
        <category term=" 浏览器安全" />
        <item>
            <guid isPermalink="true">https://gality.cn/tools/GDB-with-QEMU/</guid>
            <title>GDB+QEMU调试mbr/loader</title>
            <link>https://gality.cn/tools/GDB-with-QEMU/</link>
            <category term="tools" scheme="https://gality.cn/categories/tools/" />
            <category term="GDB" scheme="https://gality.cn/categories/tools/GDB/" />
            <category term="gdb" scheme="https://gality.cn/tags/gdb/" />
            <category term="qemu" scheme="https://gality.cn/tags/qemu/" />
            <category term="调试" scheme="https://gality.cn/tags/%E8%B0%83%E8%AF%95/" />
            <category term="os" scheme="https://gality.cn/tags/os/" />
            <pubDate>Wed, 20 Sep 2023 17:31:28 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;以下为本文所使用的系统环境与版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS Ventura 13.4.1 (c) - 英特尔芯片&lt;/li&gt;
&lt;li&gt;GDB 13.2&lt;/li&gt;
&lt;li&gt;QEMU  8.0.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id=&#34;gdb调试qemu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gdb调试qemu&#34;&gt;#&lt;/a&gt; GDB 调试 QEMU&lt;/h1&gt;
&lt;p&gt;该方法不局限于调试 mbr/loader，也可以用来调试内核。步骤如下：&lt;/p&gt;
&lt;p&gt;首先运行 qemu，并在 qemu 启动后立刻监听 GDB 连接端口（qemu 不会执行任何指令）：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Linux&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;qemu &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;harddrive.img&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Mac 调试实模式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;qemu-system-i386 &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;harddrive.img&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Mac 调试保护模式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;qemu-system-x86_64 &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-S&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;harddrive.img&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此时 qemu 会监听 1234 端口并等待 GDB 的连接，当 GDB 连接后，将调试控制权交给 GDB，我们可以用如下命令来让 GDB 连接 1234 端口（如果是远程调试的话，需要填写相应 URL 与端口）：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; target remote localhost:1234&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;调试内核&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调试内核&#34;&gt;#&lt;/a&gt; 调试内核&lt;/h2&gt;
&lt;p&gt;调试内核时为了能有源代码进行对应，我们需要将将调试用到的符号信息也编译出来，有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 GCC 编译源代码时加入 &lt;code&gt;-g&lt;/code&gt;  参数，这样会将所有符号信息打包进内核程序中（程序会比较大）&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;objcopy&lt;/code&gt;  来将符号信息单独打包到一个文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;objcopy&lt;/code&gt;  是 &lt;code&gt;GNU Binutils&lt;/code&gt;  包的一部分，在 Mac 上并没有链接到 &lt;code&gt;bin&lt;/code&gt;  下，所以不能直接使用，可以用以下步骤来手动建立链接。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1. 找到 `objcopy` 可执行文件的位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mdfind &lt;span class=&#34;token parameter variable&#34;&gt;-name&lt;/span&gt; objcopy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 2. 将可执行文件链接到 `/usr/local/bin` 中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; /usr/local/Cellar/binutils/2.41/bin/objcopy /usr/local/bin/objcopy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后就可以使用 &lt;code&gt;objcopy&lt;/code&gt;  来将调试符号输出到单独文件 &lt;code&gt;kernel.sym&lt;/code&gt;  中：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;objcopy --only-keep-debug kernel.elf kernel.sym&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;也可以在 GDB 中直接引入符号文件（可以是可执行文件，只要包含了 debug 信息即可）：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; symbol-file kernel.elf  &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;kernel.elf is the actual unstripped kernel image &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; this &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;调试实模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调试实模式&#34;&gt;#&lt;/a&gt; 调试实模式&lt;/h2&gt;
&lt;p&gt;由于 GDB 并不原生支持实模式的调试，所以对于实模式下本身应为 16 位的二进制也会按 32 位去反汇编，导致出现问题，幸好已经有大神写过相应的脚本了，我们直接使用就可以了。&lt;/p&gt;
&lt;p&gt;首先需要下载以下三个文件（操作系统从 0 到 1 系列对应的 github 项目中已经全部包含）&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; https://raw.githubusercontent.com/qemu/qemu/master/gdb-xml/i386-32bit.xml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; https://raw.githubusercontent.com/mhugo/gdb_init_real_mode/master/gdbinit_real_mode.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;?xml version=&#34;1.0&#34;?&gt;&amp;lt;!DOCTYPE target SYSTEM &#34;gdb-target.dtd&#34;&gt;&amp;lt;target&gt;&amp;lt;architecture&gt;i8086&amp;lt;/architecture&gt;&amp;lt;xi:include href=&#34;i386-32bit.xml&#34;/&gt;&amp;lt;/target&gt;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; target.xml&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;首先使用 &lt;code&gt;qemu -s -S &amp;lt;harddrive.img&amp;gt;&lt;/code&gt;  启动 qemu，然后再使用以下命令即可正确调试实模式了&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gdb &lt;span class=&#34;token parameter variable&#34;&gt;-ix&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;gdb_init_real_mode.txt&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-ex&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;set tdesc filename target.xml&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-ex&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;target remote localhost:1234&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-ex&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;br *0x7c00&#34;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-ex&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;c&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个命令其实并不复杂，用 &lt;code&gt;-ix&lt;/code&gt;  参数加载 gdb 脚本，就是该脚本实现了对实模式的支持，同时对 gdb 做了增强，会自动输出一些信息（寄存器、栈、代码等待）。&lt;/p&gt;
&lt;p&gt;至于后面的 &lt;code&gt;-ex&lt;/code&gt;  参数，其实就是直接使得 gdb 启动后依次执行这些命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;target remote localhost:1234&lt;/code&gt; ：连接 qemu 并进行调试&lt;/li&gt;
&lt;li&gt;&lt;code&gt;br *0x7c00&lt;/code&gt; ：在 &lt;code&gt;0x7c00&lt;/code&gt;  处下断点，其实就是 mbr 开始的地方，也就是我们的代码开头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; ：使程序继续执行，直到触发断点，接着程序会停在 &lt;code&gt;0x7c00&lt;/code&gt;  处。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：在 mbr/loader 的调试中，由于没有源代码，我们需要用 &lt;code&gt;ni/si&lt;/code&gt;  来执行下一条指令。&lt;/p&gt;
&lt;p&gt;调试实模式的示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/v1d8cs.png&#34; alt=&#34;gdb调试实模式&#34; height=&#34;661&#34; width=&#34;578&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考&#34;&gt;#&lt;/a&gt; 参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90ZXJuZXQuZnIvZ2RiX3JlYWxfbW9kZS5odG1s&#34;&gt;https://ternet.fr/gdb_real_mode.html&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLm9zZGV2Lm9yZy9LZXJuZWxfRGVidWdnaW5n&#34;&gt;https://wiki.osdev.org/Kernel_Debugging&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzI5NTU4ODcvaG93LXRvLWRpc2Fzc2VtYmxlLTE2LWJpdC14ODYtYm9vdC1zZWN0b3ItY29kZS1pbi1nZGItd2l0aC14LWktcGMtaXQtZ2V0cy10cg==&#34;&gt;https://stackoverflow.com/questions/32955887/how-to-disassemble-16-bit-x86-boot-sector-code-in-gdb-with-x-i-pc-it-gets-tr&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://gality.cn/misc/trail-and-error/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8GDB/</guid>
            <title>Mac下使用GDB进行调试</title>
            <link>https://gality.cn/misc/trail-and-error/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8GDB/</link>
            <category term="杂项" scheme="https://gality.cn/categories/misc/" />
            <category term="踩坑" scheme="https://gality.cn/categories/misc/trail-and-error/" />
            <category term="gdb" scheme="https://gality.cn/tags/gdb/" />
            <category term="杂项" scheme="https://gality.cn/tags/%E6%9D%82%E9%A1%B9/" />
            <category term="踩坑" scheme="https://gality.cn/tags/%E8%B8%A9%E5%9D%91/" />
            <pubDate>Wed, 13 Sep 2023 17:39:27 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;以下为本文所使用的系统环境与版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS Ventura 13.4.1 (c) - 英特尔芯片&lt;/li&gt;
&lt;li&gt;GDB 13.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h1&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;p&gt;Mac 下安装 &lt;code&gt;gdb&lt;/code&gt;  非常简单，直接使用 &lt;code&gt;homebrew&lt;/code&gt;  安装即可：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brew &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; gdb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题&#34;&gt;#&lt;/a&gt; 问题&lt;/h2&gt;
&lt;p&gt;直接使用 &lt;code&gt;gdb&lt;/code&gt;  运行调试运行其他程序会出现以下报错：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; r&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Starting program: /Users/gality/project/v8/out/xcode.debug/d8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Unable to &lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt; Mach task port &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; process-id &lt;span class=&#34;token number&#34;&gt;13210&lt;/span&gt;: &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;os/kern&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; failure &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;0x5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;please check gdb is codesigned - see taskgated&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此处错误的原因是 Mac 系统默认禁止一个未授权的进程访问 / 调试其它进程（防止安全问题）。想让内核解除这种限制，最好的方法就是用系统信任的证书对它进行签名。&lt;/p&gt;
&lt;h1 id=&#34;解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案&#34;&gt;#&lt;/a&gt; 解决方案&lt;/h1&gt;
&lt;h2 id=&#34;创建证书&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建证书&#34;&gt;#&lt;/a&gt; 创建证书&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;ins class=&#34;dot&#34;&gt;钥匙串访问.app&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;在右上角菜单栏中 &lt;span class=&#34;label info&#34;&gt;钥匙串访问&lt;/span&gt; -&amp;gt; &lt;span class=&#34;label info&#34;&gt;证书助理&lt;/span&gt; -&amp;gt;  &lt;span class=&#34;label info&#34;&gt;创建证书&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;填写信息：
&lt;ul&gt;
&lt;li&gt;名称：gdb_codesign&lt;/li&gt;
&lt;li&gt;身份类型：自签名根证书&lt;/li&gt;
&lt;li&gt;证书类型：代码签名&lt;/li&gt;
&lt;li&gt;勾选：让我覆盖这些默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用默认设置，一直点击确定到 &lt;ins class=&#34;dot&#34;&gt;指定证书位置&lt;/ins&gt; 的步骤，选择 &lt;span class=&#34;label info&#34;&gt;系统&lt;/span&gt; 后，按提示完成创建&lt;/li&gt;
&lt;li&gt;在 &lt;ins class=&#34;dot&#34;&gt;钥匙串访问.app&lt;/ins&gt; 中，选择左侧栏的  &lt;span class=&#34;label dot&#34;&gt;系统&lt;/span&gt; 内的 &lt;span class=&#34;label info&#34;&gt;我的证书&lt;/span&gt; 栏目，找到刚刚创建的&lt;ins class=&#34;dot&#34;&gt; gdb_codesign&lt;/ins&gt; 证书并双击打开 &lt;ins class=&#34;dot&#34;&gt;证书信息窗口&lt;/ins&gt; ，展开 &lt;span class=&#34;label info&#34;&gt;信任&lt;/span&gt; 项，设置 ++ 使用此证书时: ++{.dot} 为&lt;strong&gt;始终信任&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;关闭 &lt;ins class=&#34;dot&#34;&gt;证书信息窗口&lt;/ins&gt; 时，会再次输入密码。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;对gdb签名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对gdb签名&#34;&gt;#&lt;/a&gt; 对 GDB 签名&lt;/h2&gt;
&lt;p&gt;先在 &lt;code&gt;家目录下&lt;/code&gt; 创建一个 &lt;code&gt;gdb-entitlement.xml&lt;/code&gt; ，然后写入以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;plist&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;PUBLIC&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-//Apple//DTD PLIST 1.0//EN&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;plist&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;1.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;com.apple.security.cs.debugger&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;plist&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;pre&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;接着在 &lt;code&gt;家目录&lt;/code&gt; 下执行以下命令，用我们刚刚创建的证书对 gdb 进行签名：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; codesign &lt;span class=&#34;token parameter variable&#34;&gt;--entitlements&lt;/span&gt; gdb-entitlement.xml &lt;span class=&#34;token parameter variable&#34;&gt;-fs&lt;/span&gt; gdb_codesign /usr/local/bin/gdb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;「如果你是用 &lt;code&gt;brew install gdb&lt;/code&gt;  安装的 &lt;code&gt;gdb&lt;/code&gt;  的话，那么其默认路径应该在 &lt;code&gt;/usr/local/bin/gdb&lt;/code&gt; ，否则，可以使用 &lt;code&gt;whereis gdb&lt;/code&gt;  命令来找到 &lt;code&gt;gdb&lt;/code&gt;  的安装路径」&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;此时，再次尝试使用 GDB 去调试别的应用，就可以正常调试啦！🎉🎉🎉&lt;/p&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;在许多教程中（包括官方教程），均要求签名完成后必须重启电脑来使签名生效，不过我实际测试是不需要重启也可以生效的，如果你在前签名完成后仍然有问题，不妨重启下试试。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;已知bug&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#已知bug&#34;&gt;#&lt;/a&gt; 已知 Bug&lt;/h1&gt;
&lt;p&gt;如果出现如下情况：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; r&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Starting program: /Users/gality/project/V8/v8/out/xcode.debug/d8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;New Thread 0x2303 of process &lt;span class=&#34;token number&#34;&gt;16191&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后卡住不动，可以使用快捷键 &lt;span class=&#34;kbd&#34;&gt;Ctrl&lt;/span&gt; + &lt;span class=&#34;kbd red&#34;&gt;C&lt;/span&gt; 来中断，然后就可以正常调试了。&lt;/p&gt;
&lt;p&gt;这个 Bug 经常出现于首次使用 &lt;code&gt;gdb&lt;/code&gt;  调试时，中断后正常进入调试程序，且一般再次调试时就不会触发这个 Bug 了。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考&#34;&gt;#&lt;/a&gt; 参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ3Jhdml0eWxvdy9mYjU5NTE4NmNlNjA2ODUzN2E2ZTlkYTZkOGI1Yjk2ZA==&#34;&gt;https://gist.github.com/gravitylow/fb595186ce6068537a6e9da6d8b5b96d&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Vub25vaS9hcnRpY2xlL2RldGFpbHMvMTI4NjMwMzMw&#34;&gt;https://blog.csdn.net/unonoi/article/details/128630330&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://gality.cn/os/03-loader/</guid>
            <title>03-Loader编写之进入保护模式</title>
            <link>https://gality.cn/os/03-loader/</link>
            <category term="操作系统" scheme="https://gality.cn/categories/os/" />
            <category term="从0到1" scheme="https://gality.cn/categories/os/0-1/" />
            <category term="操作系统" scheme="https://gality.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
            <category term="系列长篇" scheme="https://gality.cn/tags/%E7%B3%BB%E5%88%97%E9%95%BF%E7%AF%87/" />
            <category term="二进制基本功" scheme="https://gality.cn/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E6%9C%AC%E5%8A%9F/" />
            <pubDate>Thu, 31 Aug 2023 16:08:10 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;本章是操作系统从 0 到 1 系列的第四篇文章，主要讲解了 loader 需要完成的任务以及其中涉及到的知识点。本章先总体介绍 loader 的工作，然后逐步实现部分 loader 的工作（虚拟内存之前）并讲解相关知识点，由于虚拟内存相关的知识庞大且重要，我们会在下一章进行详细探讨。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;&lt;em&gt;Concepts you may want to Google beforehand: GDT, protected mode, segment register, interrupts, pipeline&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;loader的工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loader的工作&#34;&gt;#&lt;/a&gt; Loader 的工作&lt;/h1&gt;
&lt;p&gt;总的来说，loader 的工作为以下几项（也是 loader 到 kernel 的步骤）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;禁用中断&lt;/li&gt;
&lt;li&gt;建立 GDT&lt;/li&gt;
&lt;li&gt;进入保护模式并刷新 cpu 管道、初始化段寄存器和栈&lt;/li&gt;
&lt;li&gt;建立 kernel 页目录（ &lt;code&gt;page directory&lt;/code&gt; ）和页表（ &lt;code&gt;page tables&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;打开虚拟内存（ &lt;code&gt;virtual memory&lt;/code&gt; ），进入  &lt;code&gt;paging&lt;/code&gt;  模式&lt;/li&gt;
&lt;li&gt;加载  &lt;code&gt;kernel&lt;/code&gt;  镜像到内存&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;kernel&lt;/code&gt;  代码，控制权转交给 &lt;code&gt;kernel&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;loader编写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loader编写&#34;&gt;#&lt;/a&gt; Loader 编写&lt;/h1&gt;
&lt;h2 id=&#34;禁用中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#禁用中断&#34;&gt;#&lt;/a&gt; 禁用中断&lt;/h2&gt;
&lt;p&gt;禁用中断通过设置 &lt;code&gt;IF&lt;/code&gt; flag 来实现，当 &lt;code&gt;IF&lt;/code&gt; flag 被设置为 0 时，系统会屏蔽中断命令；禁用中断非常简单，只需要一行命令即可：&lt;/p&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cli&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果你看了很多教程的话，可能会发现，有的教程中有这行代码，而有的没有，甚至在自己写的 loader 中不禁用中断可能也不会有什么问题，但是，这里是 “可能”，如果中断发生在实模式进入保护模式之前和之后，系统都没有问题，但在模式切换进行时发生中断就会发生异常。这个情况概率比较低，少量的验证是没法复现此问题的，所以我们最好还是加上 &lt;code&gt;cli&lt;/code&gt;  命令。&lt;/p&gt;
&lt;h2 id=&#34;建立gdt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立gdt&#34;&gt;#&lt;/a&gt; 建立 GDT&lt;/h2&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;什么是GDT？&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLm9zZGV2Lm9yZy9HRFRfVHV0b3JpYWw=&#34;&gt;GDT&lt;/span&gt;（ &lt;strong&gt;Global Descriptor Table&lt;/strong&gt;）即全局描述符表，又叫段描述符表，本质其实就是一种专用于 &lt;code&gt;IA-32&lt;/code&gt;  和 &lt;code&gt;x86-64&lt;/code&gt;  体系结构的二进制数据结构，该表位于内存中，具体位置保存在 &lt;code&gt;GDTR&lt;/code&gt;  寄存器中，其条目描述并规定了不同内存分区的各种特征，包括基地址、大小和访问特权如可执行、可写等。 在 Intel 的术语中，这些内存区域被称为 &lt;code&gt;segment&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我们在上一章中提到过，CPU 通过 &lt;code&gt;段基地址&lt;/code&gt;  + &lt;code&gt;段内偏移&lt;/code&gt; 的方式来扩展寻址空间，类似的，在保护模式下，CPU 通过 GDT 中记录的基地址和偏移地址实现寻址，因此可以通过 GDT 中记录的段的信息来进行内存的保护（对比实模式下，所有程序都可以访问任意内存）。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;h3 id=&#34;gdtr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gdtr&#34;&gt;#&lt;/a&gt; GDTR&lt;/h3&gt;
&lt;p&gt;根据&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLm9zZGV2Lm9yZy9HbG9iYWxfRGVzY3JpcHRvcl9UYWJsZQ==&#34;&gt;手册&lt;/span&gt;，GDT 的地址应存储在 &lt;code&gt;GDTR&lt;/code&gt;  寄存器中，这个过程通过汇编指令 &lt;code&gt;LGDT&lt;/code&gt;  进行加载，参数指向 &lt;code&gt;GDT Descriptor&lt;/code&gt;  结构：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/qsb20j.png&#34; alt=&#34;GDT Descriptor&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Size&lt;/strong&gt;：表示 GDT 的大小，以字节为单位，实际大小值为 &lt;code&gt;Size+1&lt;/code&gt; ，这是因为 &lt;code&gt;Size&lt;/code&gt;  的最大值是 65535，但是 GDT 的最大值为 65536（8192 条数据）；同时，GDT 的 &lt;code&gt;Size&lt;/code&gt;  不能为 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Offest&lt;/strong&gt;：GDT 的线性地址（并不是物理地址，而是分页地址）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时，上图中我们也可以看出 &lt;code&gt;LGDT&lt;/code&gt;  命令在 32 位和 64 位下采用不同的方式载入数据， &lt;code&gt;Offest&lt;/code&gt;  在 32 位下只有 4 字节长度，而在 64 位下有 8 字节。&lt;/p&gt;
&lt;h3 id=&#34;gdt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gdt&#34;&gt;#&lt;/a&gt; GDT&lt;/h3&gt;
&lt;p&gt;GDT 中的条目占 8 字节，在内存中的形式如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/ug568w.png&#34; alt=&#34;GDT&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意，GDT 中的第一个条目 (Entry 0) 永远为空，所以段数据应从第二个条目开始存储；表中的项由段选择器（Segment Selectors）存取，段选择器通过汇编指令或中断等硬件函数加载到段寄存器中。&lt;/p&gt;
&lt;p&gt;GDT 中每一项都有一个名为 &lt;code&gt;Segment Descriptor&lt;/code&gt;  复杂的结构，该结构长度为 8 Bytes，示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/ir3ukr.png&#34; alt=&#34;System Segment Descriptor&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Base&lt;/strong&gt;：一个 32 位值（不连续的黄色部分），记录了该段的起始地址「图中 Base address 后的括号说明了改部分在整个 Base 中的位数」&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limit&lt;/strong&gt;：一个 20 位值（不连续的粉红色部分），记录最大可寻址单元，以 1 字节为单位（最大寻址 1M），或以 1 页（4 KB）为单位；因此，在 32 位下，如果选择以页为单位且 limit 设为 &lt;code&gt;0xFFFFF&lt;/code&gt; ，那么该段将覆盖整个 4 GB（4KB*1M ）空间「图中括号内数字含义同 Base」&lt;/li&gt;
&lt;/ul&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;64位下的GDT&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;上述图片展示的是 32 位模式下的 GDT，而在 64 位模式下，段保护机制基本被废弃了，更多的是使用页机制，因此，服务于段机制的 GDT 表项就少很多；又由于 64 位下引入的 &lt;code&gt;IA-32e&lt;/code&gt;  指令集不再兼容老旧的 8086 模式，仅有代码段 CS，数据段 DS 仍和 32 位一样使用 64 位，即 8 字节的描述符，其他的段寄存器例如：DS、ES、SS 这样的段寄存器已经不再使用了，GDT 项存在的意义就更小了。&lt;/p&gt;
&lt;p&gt;另一个导致 GDT 在 64 位下不受宠的原因是，其实从 win XP 系统开始，系统进入保护模式后 GDT 的项就没用了，一直就那么空在内存中，甚至还有从系统启动到结束就没用过的表项，不但占地方还给了黑客可趁之机，很多大神看上了这一大片有可读写可执行属性的内存，就把 Shellcode 或者全局数据区布置在这了。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access Byte&lt;/strong&gt;：一个 8 位值（40-47），代表了该段的访问权限字段，字段参数及含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;P:&lt;/strong&gt; 段是否存在，存在 = 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DPL:&lt;/strong&gt; 描述符权限级别字段（2 位）， 即该段的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLm9zZGV2Lm9yZy9TZWN1cml0eSNSaW5ncw==&#34;&gt; CPU 权级&lt;/span&gt;. &lt;strong&gt;0&lt;/strong&gt; = 最高权限（内核）, &lt;strong&gt;3&lt;/strong&gt; = 最低权限（用户应用）.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;S:&lt;/strong&gt; 描述符类型字段。如果设置为 &lt;code&gt;0&lt;/code&gt; ，则定义了一个系统段 (例如 TSS「 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLm9zZGV2Lm9yZy9UYXNrX1N0YXRlX1NlZ21lbnQ=&#34;&gt;Task State Segment&lt;/span&gt; 」、LDT「 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLm9zZGV2Lm9yZy9Mb2NhbF9EZXNjcmlwdG9yX1RhYmxl&#34;&gt;Local Descriptor Table&lt;/span&gt; 」)；如果设置为 &lt;code&gt;1&lt;/code&gt; ，则定义一个代码段或数据段。这两种描述符的 Type 字段结构有所不同，接下来分别来说：&lt;/p&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;&lt;strong&gt;S=0&lt;/strong&gt; 时（System Segment Descriptor）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;：定义系统段的类型（32 位模式）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0x1:&lt;/strong&gt; 16-bit TSS (Available)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0x2:&lt;/strong&gt; LDT&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0x3:&lt;/strong&gt; 16-bit TSS (Busy)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0x9:&lt;/strong&gt; 32-bit TSS (Available)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0xB:&lt;/strong&gt; 32-bit TSS (Busy)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;：定义系统段的类型（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9uZ19tb2Rl&#34;&gt;Long Mode&lt;/span&gt;）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0x2:&lt;/strong&gt; LDT&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0x9:&lt;/strong&gt; 64-bit TSS (Available)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0xB:&lt;/strong&gt; 64-bit TSS (Busy)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;&lt;strong&gt;S=1&lt;/strong&gt; 时（Code/Data Segment），&lt;strong&gt;Type&lt;/strong&gt; 字段会被拆分为以下字段&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/shts2l.png&#34; alt=&#34;Access Byte&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;：第 43 位，是否可执行位， &lt;code&gt;0&lt;/code&gt;  代表该段为数据段，不可执行； &lt;code&gt;1&lt;/code&gt;  代表代码段，可执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DC&lt;/strong&gt;：第 42 位，方向位 / 符合位
&lt;ul&gt;
&lt;li&gt;对于数据段：表示方向位。 &lt;code&gt;0&lt;/code&gt;  代表段向高地址增长； &lt;code&gt;1&lt;/code&gt;  代表段向低地址生长&lt;/li&gt;
&lt;li&gt;对于代码段：表示符合位。 &lt;code&gt;0&lt;/code&gt;  代表只有 &lt;code&gt;DPL&lt;/code&gt;  字段中指定的权限可以执行该段代码； &lt;code&gt;1&lt;/code&gt;  表示该段代码的执行权限可以小于等于 &lt;code&gt;DPL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RW&lt;/strong&gt;：第 41 位，可读 / 可写位
&lt;ul&gt;
&lt;li&gt;对于代码段：表示可读位。 &lt;code&gt;0&lt;/code&gt;  代表该段不允许读， &lt;code&gt;1	&lt;/code&gt; 代表可读；代码段永远没有写权限。&lt;/li&gt;
&lt;li&gt;对于数据段：表示可写位。 &lt;code&gt;0&lt;/code&gt;  代表该段不可写， &lt;code&gt;1&lt;/code&gt;  代表可写；数据段永远有读权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;：第 40 位，访问位，最好设置为 0，CPU 会在该段被访问时自动设置它。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flags&lt;/strong&gt;：一个 4 位值（52-55 位）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;G&lt;/strong&gt;：粒度位，指示 &lt;code&gt;Limit&lt;/code&gt;  的单位。 &lt;code&gt;0&lt;/code&gt;  表示 &lt;code&gt;Limit&lt;/code&gt;  单位为 1 字节 (字节粒度)。如果设置为 &lt;code&gt;1&lt;/code&gt; ，则 &lt;code&gt;Limit&lt;/code&gt;  单位为 4KB 块 (页面粒度)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DB&lt;/strong&gt;：大小位， &lt;code&gt;0&lt;/code&gt;  代表定义了一个 16 位保护模式段， &lt;code&gt;1&lt;/code&gt;  表示定义了一个 32 位保护模式段；一个 GDT 可以同时有 16 位和 32 位的位选择器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;：长模式代码标志， &lt;code&gt;1&lt;/code&gt;  表示该段定义为 64 位代码段，此时 &lt;code&gt;DB&lt;/code&gt;  应该设置位 &lt;code&gt;0&lt;/code&gt; ； &lt;code&gt;0&lt;/code&gt;  表示为其他类型段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;：保留位，设为 0 即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;asm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#asm&#34;&gt;#&lt;/a&gt; asm&lt;/h3&gt;
&lt;p&gt;以上就是所有有关 &lt;code&gt;GDT&lt;/code&gt;  的理论知识啦，现在让我们动手写一下我们的操作系统的 &lt;code&gt;GDT&lt;/code&gt;  吧！梳理一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;GDT&lt;/code&gt;  的第一项必须为空项&lt;/li&gt;
&lt;li&gt;至少定义两个段：代码段、数据段（ &lt;code&gt;base&lt;/code&gt;  和 &lt;code&gt;length&lt;/code&gt;  先一样即可）&lt;/li&gt;
&lt;li&gt;获取 &lt;code&gt;GDT&lt;/code&gt;  的地址&lt;/li&gt;
&lt;li&gt;创建 &lt;code&gt;GDT Descriptor&lt;/code&gt;  结构用于后续填充 &lt;code&gt;GDTR&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;32bit-gdt.asm&lt;/summary&gt;&lt;div&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;gdt_start:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; don&#39;t remove the labels, they&#39;re needed to compute sizes and jumps&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; the GDT starts with a null 8-byte&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dd &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; 4 byte&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dd &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; 4 byte&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; GDT for code segment. base = 0x00000000, length = 0xfffff&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; for flags, refer to https://gality.cn/os/03-loader/#gdt&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; again,  1 bytes = 8 bits | 1 word = 2 bytes = 16 bits&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;gdt_code:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dw &lt;span class=&#34;token number&#34;&gt;0xffff&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;; segment length, bits 0-15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dw &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;; segment base, bits 0-15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    db &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;; segment base, bits 16-23&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    db &lt;span class=&#34;token number&#34;&gt;10011010b&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; flags (8 bits), little-endian, so compare the doc. from P to A (high to low)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    db &lt;span class=&#34;token number&#34;&gt;11001111b&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; flags (4 bits) + segment length, bits 16-19 | length=0xfffff&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    db &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;; segment base, bits 24-31&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; GDT for data segment. base and length identical to code segment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; some flags changed, again, https://gality.cn/os/03-loader/#gdt&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;gdt_data:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dw &lt;span class=&#34;token number&#34;&gt;0xffff&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dw &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    db &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    db &lt;span class=&#34;token number&#34;&gt;10010010b&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    db &lt;span class=&#34;token number&#34;&gt;11001111b&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    db &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;gdt_end:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; don&#39;t remove this label&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; GDT Descriptor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;gdt_descriptor:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dw gdt_end &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; gdt_start &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; size (16 bit), always one less of its true size&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    dd gdt_start &lt;span class=&#34;token comment&#34;&gt;; address (32 bit)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;;define some constants for later use&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CODE_SEG equ gdt_code &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; gdt_start&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DATA_SEG equ gdt_data &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; gdt_start&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;上面的代码中其实还隐藏了一个知识点，仔细想想也确实会有一个并不是很合逻辑的地方。我们知道在高级语言，例如 &lt;code&gt;C语言&lt;/code&gt; 中，一个一个的创建变量并不能保证变量在内存中是连续存储的，除非用数组；但是我们的代码里面并没有任何的特殊数据结构的形式，那么 &lt;code&gt;GDT&lt;/code&gt;  的每一项在内存中是一定在一起的吗？&lt;/p&gt;
&lt;details class=&#34;primary&#34;&gt;&lt;summary&gt;如果是，那么这代表什么？如果不是，那么实际又是怎么实现的呢？&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;答案：&lt;strong&gt;一定是在一起&lt;/strong&gt;。这是因为汇编源代码里的指令和数据部分是可以自由混杂排布的，而且最终编译出来的二进制中，它们排布顺序完全遵循源代码的排布。所以你可以任意安排你的指令和数据所处的位置，只需记得要使用各种跳转指令来控制代码运行即可。&lt;/p&gt;
&lt;p&gt;但是，整个  &lt;code&gt;loader&lt;/code&gt;  的起始位置，即入口代码必须在  &lt;code&gt;0x9000&lt;/code&gt;  处，因为这是和  &lt;code&gt;mbr&lt;/code&gt;  约定好的跳转地址（详见&lt;a href=&#34;https://gality.cn/os/02-mbr/&#34;&gt;上一章&lt;/a&gt;），至于后面全部可以自由发挥和排布。&lt;/p&gt;
&lt;p&gt;其实，这个特性又是另外一个问题的答案，不知道有没有读者在看前面的代码时有这么一个疑问，为什么都要在代码结束加上 &lt;code&gt;jmp $&lt;/code&gt; ，一定要加吗？&lt;/p&gt;
&lt;p&gt;当然&lt;strong&gt;是的&lt;/strong&gt;，这个问题的答案同样是来源于上述特性，如果不加上 &lt;code&gt;jmp $&lt;/code&gt;  来使代码进入死循环，那么代码将继续向后执行，将随机乱码理解成代码去执行，这样会导致未知错误。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;h2 id=&#34;保护模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#保护模式&#34;&gt;#&lt;/a&gt; 保护模式&lt;/h2&gt;
&lt;h3 id=&#34;设置gdtr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置gdtr&#34;&gt;#&lt;/a&gt; 设置 GDTR&lt;/h3&gt;
&lt;p&gt;上一步中我们已经定义了 &lt;code&gt;GDT&lt;/code&gt;  和 &lt;code&gt;GDT Descriptor&lt;/code&gt;  结构，只需要使用 &lt;code&gt;lgdt [gdt_descriptor]&lt;/code&gt;  命令来将 &lt;code&gt;GDT Descriptor&lt;/code&gt;  的地址加载到 &lt;code&gt;GDTR&lt;/code&gt;  寄存器中即可。&lt;/p&gt;
&lt;h3 id=&#34;进入保护模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进入保护模式&#34;&gt;#&lt;/a&gt; 进入保护模式&lt;/h3&gt;
&lt;p&gt;设置完 &lt;code&gt;GDT&lt;/code&gt;  后我们就可以使 CPU 进入保护模式了，进入保护模式非常简单，只需要设置 CPU 的 &lt;code&gt;cr0&lt;/code&gt;  寄存器即可。 &lt;code&gt;cr0&lt;/code&gt;  寄存器是一个控制寄存器，共 32 位，每一位都对应着不同的控制能力，我们这里无需管其他位的能力，只需要关注第 0 位 PE（Protected Enable）位即可，当 &lt;code&gt;PE=0&lt;/code&gt;  时，启动保护模式； &lt;code&gt;PE=1&lt;/code&gt;  时，则在实模式运行。&lt;/p&gt;
&lt;p&gt;我们在对 cr0 寄存器进行操作时还必须注意需要保留其他控制位值不变，想到了什么操作？没错，就是 &lt;code&gt;OR&lt;/code&gt; ，该操作可以仅将第 0 位改变成 &lt;code&gt;1&lt;/code&gt; ，并保持其他位不变。&lt;/p&gt;
&lt;p&gt;还有一点需要注意的是， &lt;code&gt;OR&lt;/code&gt;  操作不能直接对 &lt;code&gt;cr0&lt;/code&gt;  寄存器进行操作，所以我们需要借助 &lt;code&gt;eax&lt;/code&gt;  寄存器来作为桥梁，完成对 &lt;code&gt;cr0&lt;/code&gt;  寄存器的赋值，代码是不是已经呼之欲出了？&lt;/p&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;进入保护模式&lt;/summary&gt;&lt;div&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;eax&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;cr0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;or &lt;span class=&#34;token register variable&#34;&gt;eax&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; set 32-bit mode bit in cr0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;cr0&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;eax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;此时，我们就正式进入保护模式了。&lt;/p&gt;
&lt;h3 id=&#34;刷新cpu管道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#刷新cpu管道&#34;&gt;#&lt;/a&gt; 刷新 CPU 管道&lt;/h3&gt;
&lt;p&gt;为什么要刷新 CPU 管道（pipeline）呢？是因为 CPU 是以 pipeline 的方式工作的，需要执行的指令都在 pipeline 中，若两个不同指令依赖同一块数据，同时修改这块数据就可能导致危险，这种情况下，就需要刷新 CPU 管道来防止这种危险发生（这里查到的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY29tcHV0ZXJob3BlLmNvbS9qYXJnb24vcC9waXBlbGluZS1mbHVzaC5odG0jOn46dGV4dD1BJTIwaGF6YXJkJTIwY29uZGl0aW9uJTIwbWF5JTIwcHJlc2VudCxjb3JydXB0ZWQlMjBieSUyMHRoZSUyMHBpcGVsaW5pbmclMjBwcm9jZXNzLg==&#34;&gt;资料&lt;/span&gt;是这样的，但是感觉稍微有一点点问题，有熟悉的师傅欢迎评论区留言呀～）。&lt;/p&gt;
&lt;p&gt;刷新 CPU 管道也非常简单，可以通过一个远跳命令实现:&lt;/p&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jmp CODE_SEG:init_pm &lt;span class=&#34;token comment&#34;&gt;; far jump by using a different segment to refresh pipeline&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;初始化段寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化段寄存器&#34;&gt;#&lt;/a&gt; 初始化段寄存器&lt;/h3&gt;
&lt;p&gt;上一章中我们已经介绍了寄存器的默认用法及含义，这里详细介绍下段寄存器各自的用途&lt;/p&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;在保护模式下，CPU 提供了段寄存器（16 位）。段寄存器存放的并不是段的基地址，而是段选择符（Segment Descriptor）的相对于 GDT 地址的偏移地址（这也是为什么我们在上一节的代码中要定义 &lt;code&gt;CODE_SEG&lt;/code&gt;  和 &lt;code&gt;DATA_SEG&lt;/code&gt;  的原因），这些段寄存器包括 &lt;code&gt;cs&lt;/code&gt; 、 &lt;code&gt;ss&lt;/code&gt; 、 &lt;code&gt;ds&lt;/code&gt; 、 &lt;code&gt;es&lt;/code&gt; 、 &lt;code&gt;fs&lt;/code&gt; 、 &lt;code&gt;gs&lt;/code&gt; 。前三个寄存器有特定用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cs&lt;/strong&gt;：代码段寄存器，指向包含程序指令的段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ss&lt;/strong&gt;：栈段寄存器，指向包含当前程序栈的段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ds&lt;/strong&gt;：数据段寄存器，指向包含静态数据或全局数据的数据段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后三个段寄存器是通用的。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cs&lt;/code&gt;  寄存器直接由 CPU 设置（想想上一章中讲的）我们无需初始化，所以我们就需要初始化其他的寄存器，至于用什么初始化，当然是我们提前定义好的 &lt;code&gt;DATA_SEG&lt;/code&gt;  变量啦，有一点需要注意，段寄存器同样也不能直接进行立即数的赋值，我们需要借助 &lt;code&gt;ax&lt;/code&gt; （16 位）来帮助赋值。&lt;/p&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;[&lt;/span&gt;bits &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;init_pm:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; we are now using 32-bit instructions&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;, DATA_SEG &lt;span class=&#34;token comment&#34;&gt;; update the segment registers&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ds&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ss&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;es&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;fs&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;gs&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;初始化栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化栈&#34;&gt;#&lt;/a&gt; 初始化栈&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/k0xq4i.png&#34; alt=&#34;mbr工作阶段内存布局&#34; /&gt;&lt;/p&gt;
&lt;p&gt;还记得上面这个图吗，我们将 &lt;code&gt;loader&lt;/code&gt;  的地址设置在了 &lt;code&gt;0x8000&lt;/code&gt;  后 &lt;code&gt;0x1000&lt;/code&gt;  的空间内，此时 &lt;code&gt;0x8000&lt;/code&gt;  前后的空间和 &lt;code&gt;mbr&lt;/code&gt;  前的空间都是空着的，我们用 &lt;code&gt;mbr&lt;/code&gt;  前面的空间来布置栈，就像示意图中标识的那样，将栈底设置为 &lt;code&gt;0x7B00&lt;/code&gt; （栈向低地址增长），代码同样非常简单。&lt;/p&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;ebp&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x7B00&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;esp&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ebp&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;将以上代码合并起来，就形成了从实模式到保护模式的代码&lt;/p&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bits &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; real mode&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;switch_to_pm:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cli &lt;span class=&#34;token comment&#34;&gt;; 1. disable interrupts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    lgdt &lt;span class=&#34;token operator&#34;&gt;[&lt;/span&gt;gdt_descriptor&lt;span class=&#34;token operator&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; 2. load the GDT descriptor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;eax&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;cr0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    or &lt;span class=&#34;token register variable&#34;&gt;eax&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; 3. set 32-bit mode bit in cr0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;cr0&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;eax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jmp CODE_SEG:init_pm &lt;span class=&#34;token comment&#34;&gt;; 4. far jump by using a different segment to refresh cpu pipeline&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bits &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; protected mode&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;init_pm:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; we are now using 32-bit instructions&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;, DATA_SEG &lt;span class=&#34;token comment&#34;&gt;; 5. update the segment registers&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ds&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ss&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;es&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;fs&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;gs&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ebp&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x7B00&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; 6. update the stack right at the top of the free space&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;esp&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ebp&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call BEGIN_PM &lt;span class=&#34;token comment&#34;&gt;; 7. Call a well-known label with useful code&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此时，我们不妨写一个 main 函数来调用上述过程，然后测试一下程序：&lt;/p&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;[&lt;/span&gt;org &lt;span class=&#34;token number&#34;&gt;0x7c00&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; bootloader offset&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;bp&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x9000&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; set the stack&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;bp&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;, MSG_REAL_MODE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print &lt;span class=&#34;token comment&#34;&gt;; This will be written after the BIOS messages&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call switch_to_pm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;, MSG_ERROR &lt;span class=&#34;token comment&#34;&gt;; this will actually never be executed&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jmp &lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;include &lt;span class=&#34;token string&#34;&gt;&#34;../02-mbr/boot-print.asm&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; must be the first included&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;include &lt;span class=&#34;token string&#34;&gt;&#34;32bit-gdt.asm&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;include &lt;span class=&#34;token string&#34;&gt;&#34;32bit-switch.asm&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;[&lt;/span&gt;bits &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;BEGIN_PM:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; after the switch we will get here&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; mov ebx, MSG_PROT_MODE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; call print_string_pm ; Note that this will be written at the top left corner&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jmp &lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;MSG_REAL_MODE db &lt;span class=&#34;token string&#34;&gt;&#34;Started in 16-bit real mode&#34;&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;MSG_ERROR db &lt;span class=&#34;token string&#34;&gt;&#34;Loaded 32-bit protected mode ERROR&#34;&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; bootsector&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;times &lt;span class=&#34;token number&#34;&gt;510&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;(&lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;) db &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dw &lt;span class=&#34;token number&#34;&gt;0xaa55&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后编译执行就可以了&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nasm &lt;span class=&#34;token parameter variable&#34;&gt;-fbin&lt;/span&gt; 32bit-main.asm &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; loader.bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;qemu-system-i386 &lt;span class=&#34;token parameter variable&#34;&gt;-fda&lt;/span&gt; loader.bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;实际测试发现 &lt;code&gt;boot-print.asm&lt;/code&gt;  必须第一个 include，否则 &lt;code&gt;nasm&lt;/code&gt;  在编译的时候会把 &lt;code&gt;[bx]&lt;/code&gt;  转换成 &lt;code&gt;[edi]&lt;/code&gt;  不知道是 bug 还是我不知道的什么原因，总之，首先 include 就不会有问题了。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;至此，CPU 已经进入了保护模式（32 位），接下来我们需要完成虚拟内存到物理内存的映射，为 kernel 的工作打下基础，由于这部分内容体量相对庞大且至关重要，所以我们放在下一章详细去讲。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://gality.cn/os/02-mbr/</guid>
            <title>02-从BIOS启动到MBR编写</title>
            <link>https://gality.cn/os/02-mbr/</link>
            <category term="操作系统" scheme="https://gality.cn/categories/os/" />
            <category term="从0到1" scheme="https://gality.cn/categories/os/0-1/" />
            <category term="操作系统" scheme="https://gality.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
            <category term="系列长篇" scheme="https://gality.cn/tags/%E7%B3%BB%E5%88%97%E9%95%BF%E7%AF%87/" />
            <category term="二进制基本功" scheme="https://gality.cn/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E6%9C%AC%E5%8A%9F/" />
            <pubDate>Tue, 22 Aug 2023 12:03:46 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;本章是操作系统从 0 到 1 系列的第三篇文章，主要讲解了计算机从通电到启动操作系统前的过程。在本章中，我将会介绍引导启动中的核心概念和知识，并最终自己实现一个 MBR。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;&lt;em&gt;Concepts you may want to Google beforehand: assembler, BIOS, BOOT, Real mode, interrupts, CPU registers, control structures, function calling, strings&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;bios和boot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bios和boot&#34;&gt;#&lt;/a&gt; BIOS 和 BOOT&lt;/h1&gt;
&lt;p&gt;即使不了解计算机的人也可能对于 &lt;code&gt;boot&lt;/code&gt;  和 &lt;code&gt;bios&lt;/code&gt;  这两个词有所耳闻，然而即使是计算机专业的人也可能会混淆这两者的概念，这里我们先来区分一下这两个概念，以便于我们后续的展开。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ins class=&#34;wavy&#34;&gt;BIOS&lt;/ins&gt; 是英文 &amp;quot;Basic Input Output System&amp;quot; 的缩略语，直译过来后中文名称就是 &amp;quot;基本输入输出系统&amp;quot;。它是一组固化到计算机内主板上一个&lt;strong&gt; ROM 芯片&lt;/strong&gt;上的程序，由主板的制造厂商编写代码；我们有时听到的 “刷 BIOS” 就是指将主版上的 BIOS 程序进行更换。&lt;/li&gt;
&lt;li&gt;&lt;ins class=&#34;wavy&#34;&gt;BOOT&lt;/ins&gt; 其实是指 &lt;code&gt;Boot Loader&lt;/code&gt; ，boot 本身就是 “引导” 的意思，是指一种用来引导操作系统激活的程序，广泛应用于各种系统之中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对比&#34;&gt;#&lt;/a&gt; 对比&lt;/h2&gt;
&lt;p&gt;BIOS 保存着计算机最重要的&lt;strong&gt;基本输入输出程序&lt;/strong&gt;、&lt;strong&gt;系统设置信息&lt;/strong&gt;、&lt;strong&gt;开机后自检程序&lt;/strong&gt;和&lt;strong&gt;系统自启动程序&lt;/strong&gt;，其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。可从 CMOS 中读写系统设置的具体信息。&lt;/p&gt;
&lt;p&gt;当按下电脑开机键的一瞬间，CPU 会先被激活去寻找 BIOS，接着 BIOS 会先在 Flash Memory 中执行，初始化计算机各种硬件并检测完整性，再执行 CMOS 中用户所喜好的设置，然后 BIOS 将自己解压缩到计算机的主存储器中。再启动引导程序 boot，然后由 boot 将操作系统加载到内存中执行。&lt;/p&gt;
&lt;p&gt;Boot 的过程其实就是由 &lt;code&gt;mbr&lt;/code&gt; + &lt;code&gt;loader&lt;/code&gt;  一起实现的，后面会详细讲解什么是 &lt;code&gt;mbr&lt;/code&gt; ，什么是 &lt;code&gt;loader&lt;/code&gt; ，耐心看下去吧～&lt;/p&gt;
&lt;h1 id=&#34;mbr实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mbr实现&#34;&gt;#&lt;/a&gt; MBR 实现&lt;/h1&gt;
&lt;p&gt;尽管很多教程中直接提供了 &lt;code&gt;mbr&lt;/code&gt;  和 &lt;code&gt;loader&lt;/code&gt;  供我们使用而无需自己编写，但是我仍推荐至少自行实现一次这两者，原因如下；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有助于提高汇编能力，这一点在后面也至关重要。&lt;/li&gt;
&lt;li&gt;它的编写并不困难，可以借助 &lt;code&gt;mbr&lt;/code&gt; +  &lt;code&gt;loader&lt;/code&gt;  的编写来入门操作系统的编写。&lt;/li&gt;
&lt;li&gt;从 CPU 通电开始写起有助于建立对于计算机的全面认知，为后面的内核、可执行程序的加载，以及虚拟内存的建立做好准备。&lt;/li&gt;
&lt;li&gt;boot 阶段会初步搭建起 segment 以及虚拟内存的框架，为后续 kernel 编写打下基础&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💗真是激动人心，我们要开始编写自己的 &lt;code&gt;mbr&lt;/code&gt;  了！&lt;/p&gt;
&lt;h2 id=&#34;从通电开始&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从通电开始&#34;&gt;#&lt;/a&gt; 从通电开始&lt;/h2&gt;
&lt;p&gt;一个经典的问题：&lt;span class=&#34;orange&#34;&gt;计算机通电后是怎么就进入到了操作系统呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;计算机通电后，CPU 处于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlOUUlRTYlQTglQTElRTUlQkMlOEYvNzM1NDUzMQ==&#34;&gt;实模式&lt;/span&gt;，在实模式下，CPU 寻址方式为：由 16 位段寄存器值 * 10H 加 16 位偏移地址来形成 20 位的寻址空间，即只有 1M 的空间是可以被 CPU 读取的，而其他空间 CPU 都无法使用，CPU 必须借助这 1M 空间内的存储的各种程序来引导操作系统启动。&lt;/p&gt;
&lt;details class=&#34;primary&#34;&gt;&lt;summary&gt;为什么是20位寻址空间呢？&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;这与 CPU 的发展历史有关，在 CPU 早期 (8086 时期)，由于 CPU 性能有限，一共只有 20 位地址线，可寻址空间只有 1M (2&lt;sup&gt;20&lt;/sup&gt; bytes)，以及 8 个 16 位的通用寄存器，和 4 个 16 位的段寄存器；16 位的物理地址只能访问 64KB (2&lt;sup&gt;16&lt;/sup&gt; bytes) 的内存。所以，为了能够通过这些 16 位的寄存器去构成 20 位的寻址地址，访问 1 MB 的内存，必须采取一种特殊的方式。&lt;/p&gt;
&lt;p&gt;特殊方式即由 &lt;code&gt; 段基址 + 段内偏移&lt;/code&gt; 的方式来将 16 位的地址扩展为 20 位，具体方式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;段基址：由段寄存器提供，并将寄存器值左移 4 位，将结果作为基地址。&lt;/li&gt;
&lt;li&gt;段内偏移地址：由通用寄存器来提供 (如 EIP)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将二者相加，得到一个 20 位的地址，覆盖 CPU 20 位的寻址空间，这里给出一个例子以便于更形象的说明：&lt;/p&gt;
&lt;p&gt;例如，段基址为 &lt;code&gt;0x1000&lt;/code&gt; ，段内偏移为 &lt;code&gt;0x1234&lt;/code&gt; ，则此时物理地址可以由下式计算得出：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnalign=&#34;center&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1000&lt;/mn&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1234&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;10000&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1234&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;11234&lt;/mn&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\begin {array}{c}

0x1000 &amp;lt;&amp;lt; 4 + 0x1234 = 0x10000 + 0x1234 = 0x11234

\end {array}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.2000000000000002em;vertical-align:-0.35000000000000003em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8500000000000001em;&#34;&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.35000000000000003em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;因此，这至关重要的 1MB 空间的划分是已经固定好的，每一块都有规定的用途的，被映射到不同的设备上：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/vj8uwa.png&#34; alt=&#34;实模式下1M寻址空间分配表&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;bios的工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bios的工作&#34;&gt;#&lt;/a&gt; BIOS 的工作&lt;/h2&gt;
&lt;p&gt;我们前面提到，CPU 通电后，将会执行 BIOS 程序，那么 BIOS 具体的工作有哪些呢？包括以下几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开机后 CPU 的指令寄存器 	 &lt;code&gt;EIP&lt;/code&gt;  被设置为地址  &lt;code&gt;0xFFFF0&lt;/code&gt; ，这一地址指向 BIOS 固件上的代码，CPU 从这里执行开机后的第一条指令；&lt;/li&gt;
&lt;li&gt;CPU 开始执行 BIOS 上的代码，这一部分主要是硬件输入输出设备相关的检查，以及建立一个最初的中断向量表（后面会提到）；&lt;/li&gt;
&lt;li&gt;BIOS 代码最后阶段的工作，就是检查启动盘上的  &lt;code&gt;mbr&lt;/code&gt;  分区，所谓 mbr 分区就是指磁盘上的第一个 512 bytes 的内容，又叫 &lt;code&gt;引导分区&lt;/code&gt; ；BIOS 会对这 512 bytes 做一个检查：它的最后 2 个字节必须是特定的两个 magic number： &lt;code&gt;0x55&lt;/code&gt;  和  &lt;code&gt;0xaa&lt;/code&gt; ，否则它就不是一个合法的启动盘；&lt;/li&gt;
&lt;li&gt;检查通过后，BIOS 将这 512B 加载到内存  &lt;code&gt;0x7C00&lt;/code&gt;  处，到 0x7E00 为止，然后指令跳转到 0x7C00 开始执行；至此 BIOS 退出舞台；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以将这个过程画成一个图，来帮助我们理解&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/a4r89b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黄色部分是 &lt;code&gt;mbr&lt;/code&gt; ，被 bios 从磁盘复制到内存中去执行&lt;/li&gt;
&lt;li&gt;粉色部分是 &lt;code&gt;bios&lt;/code&gt;  代码&lt;/li&gt;
&lt;li&gt;黄色部分的两边的白色部分 (0x500 开始) 是我们可以自由使用的空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mbr的工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mbr的工作&#34;&gt;#&lt;/a&gt; mbr 的工作&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mbr&lt;/code&gt;  的大小被限制在了 512 bytes，这对于引导一个操作系统的重任来说有点太小了，里面根本放不下太多的数据和代码，所以 &lt;code&gt;mbr&lt;/code&gt;  的工作其实只是将一个 &lt;code&gt;laoder&lt;/code&gt;  加载到内存，然后跳转到 &lt;code&gt;loader&lt;/code&gt;  去继续执行。&lt;/p&gt;
&lt;p&gt;我们还是用一个示意图来表示这个过程的变化和内存布局：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/k0xq4i.png&#34; alt=&#34;mbr工作阶段内存布局&#34; /&gt;&lt;/p&gt;
&lt;p&gt;「假设我们把 &lt;code&gt;loader&lt;/code&gt;  加载到 &lt;code&gt;0x8000&lt;/code&gt;  处（可以任意指定加载的位置，只需要 &lt;code&gt;mbr&lt;/code&gt;  中对应起来就可以）， &lt;code&gt;loader&lt;/code&gt;  大约 4KB 大小」&lt;/p&gt;
&lt;p&gt;上一节中我们说过， &lt;code&gt;mbr&lt;/code&gt;  被加载到内存后，前后都有一块可供我们自由使用的空间，前面那块 (0x500 开始) 较小，大约 30KB，而后面这块 (0x7E00 开始) 就大的多了，大约有 608KB 左右的空间，我们就可以利用这块内存空间，将 &lt;code&gt;loader&lt;/code&gt;  加载进内存并执行。&lt;/p&gt;
&lt;h2 id=&#34;牛刀小试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#牛刀小试&#34;&gt;#&lt;/a&gt; 牛刀小试&lt;/h2&gt;
&lt;p&gt;理论知识已经学了很多了，但是直接就开始写一个完整 &lt;code&gt;mbr&lt;/code&gt;  还是有点难度的，不如我们从 &lt;code&gt;hello world&lt;/code&gt;  开始。&lt;/p&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;🎯编写一个 mbr，并打印 &#39;Hello World!&#39;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;原理：通过&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSU5UXzEwSA==&#34;&gt; 0x10H 中断&lt;/span&gt;触发 bios 中的打印服务，向屏幕输出字符，该中断的调用规则为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Teletype output&lt;/th&gt;
&lt;th&gt;AH=0Eh&lt;/th&gt;
&lt;th&gt;AL = Character, BH = Page Number, BL = &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQklPU19Db2xvcl9BdHRyaWJ1dGVz&#34;&gt;Color&lt;/span&gt; (only in graphic mode)&lt;/th&gt;
&lt;th&gt;no return&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;然后我们就可以编写代码了：&lt;/p&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;ah&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x0e&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; set tty mode&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;H&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;e&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;l&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; &#39;l&#39; is still on al&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;o&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;W&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;o&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;l&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;d&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#39;!&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jmp &lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;;  jump to current address = infinite loop&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;times &lt;span class=&#34;token number&#34;&gt;510&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; (&lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;) db &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; fill with 0,length = (510 - previous code)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dw &lt;span class=&#34;token number&#34;&gt;0xaa55&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; x86 is little-endian&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;nasm 语法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; ：当前行在所在段的相对位移&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$$&lt;/code&gt; ：当前段的起始地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt; ：即  &lt;code&gt;define double&lt;/code&gt; ，定义一个 4 字节值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dw&lt;/code&gt; ：即 &lt;code&gt;define word&lt;/code&gt; ，定义一个 2 字节值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt; ：即  &lt;code&gt;define byte&lt;/code&gt; ，定义一个 1 字节值&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;我们把上面的代码保存成  &lt;code&gt;boot_hello_world.asm&lt;/code&gt; , 然后用 &lt;code&gt;nasm&lt;/code&gt;  编译他：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nasm -fbin boot_hello_world.asm -o boot_hello_world.bin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后你就可以通过 &lt;code&gt;xxd&lt;/code&gt;  来查看生成的 &lt;code&gt;bin&lt;/code&gt;  文件:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/szjute.jpg&#34; alt=&#34;xxd of bin file&#34; height=&#34;561&#34; width=&#34;478&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，结尾时 Magic Number  &lt;code&gt;0x55aa&lt;/code&gt; ，前面是我们写的 asm 代码转成的机器码，中间用 0 填充，一共 &lt;code&gt;0x200&lt;/code&gt;  也就是 512bytes。&lt;/p&gt;
&lt;p&gt;接着就可以用 qemu 来执行他了&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# mac&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;qemu-system-i386 boot_hello_world.bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# linux&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;qemu boot_hello_world.bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;不出意外的话，你就会看到 &lt;code&gt;Hello World!&lt;/code&gt;  了🎉&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/q8kecc.png&#34; alt=&#34;qemu with hello world&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;problem-time&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#problem-time&#34;&gt;#&lt;/a&gt; Problem Time&lt;/h3&gt;
&lt;ol&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;以下哪行代码可以使 &lt;code&gt;Hello World!&lt;/code&gt;  以绿色字体输出：&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;&lt;code&gt;mov bl, 0x0a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mov bh, 0x0a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mov bl, 0x0c&lt;/code&gt;&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;以上都不对&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;该设置只有在图形化模式下才生效&lt;/li&gt;
&lt;li&gt;需设置 bl 才能影响输出字符颜色&lt;/li&gt;
&lt;li&gt;根据手册 10 才是绿色对应的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;更进一步打印信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更进一步打印信息&#34;&gt;#&lt;/a&gt; 更进一步 (打印信息)&lt;/h2&gt;
&lt;p&gt;上面我们已经学会了打印字符，那么接下来我们尝试编写几个打印函数用于输出错误或信息，帮助我们在后面的过程中定位问题。&lt;/p&gt;
&lt;h3 id=&#34;打印新行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打印新行&#34;&gt;#&lt;/a&gt; 打印新行&lt;/h3&gt;
&lt;p&gt;先简单一点，我们写一个打印换行符的函数 &lt;code&gt;print_nl()&lt;/code&gt; ，其实就是依次打印 ascii 表特殊字符中的换行符，很简单，做一点点解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\r&lt;/code&gt; ：对应 ascii 码为 13 的字符，表示回车，将当前位置移到本行头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\n&lt;/code&gt; ：对应 ascii 码为 10 的字符，表示换行，将当前位置移动到下一行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;print_nl()&lt;/summary&gt;&lt;div&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; print a new line&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;print_nl:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    pusha&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ah&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x0e&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; tty mode&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x0a&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; &#39;\r&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x0d&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; &#39;\n&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    popa&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ret&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h3 id=&#34;打印字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打印字符串&#34;&gt;#&lt;/a&gt; 打印字符串&lt;/h3&gt;
&lt;p&gt;然后加大一点难度，通过循环来实现一个打印字符串的函数 &lt;code&gt;print()&lt;/code&gt; ，本质就是一个一个的打印字符，一些要点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为调用 &lt;code&gt;print()&lt;/code&gt;  的场景是程序运行过程中，所以函数开始要 &lt;code&gt;pusha&lt;/code&gt;  保存 “现场”，在调用结束前还需要用 &lt;code&gt;popa&lt;/code&gt;  还原 “现场”&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;bx&lt;/code&gt;  寄存器来传递参数 (寄存器有&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHV0b3JpYWxzcG9pbnQuY29tL2Fzc2VtYmx5X3Byb2dyYW1taW5nL2Fzc2VtYmx5X3JlZ2lzdGVycy5odG0=&#34;&gt;默认的用法&lt;/span&gt;，这里推荐用 &lt;code&gt;bx&lt;/code&gt;  来传递参数)&lt;/li&gt;
&lt;li&gt;可以通过 &lt;code&gt;cmp&lt;/code&gt;  和 &lt;code&gt;je&lt;/code&gt;  命令来进行条件判断和分支跳转。&lt;/li&gt;
&lt;/ul&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;print( [bx]string s )&lt;/summary&gt;&lt;div&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; print a string pointed with bx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;print:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    pusha&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; keep this in mind:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; while (string[i] != 0) &amp;#123; print string[i]; i++ &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; the comparison for string end (null byte)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;print_start:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token operator&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; &#39;bx&#39; is the base address for the string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmp &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; if &#39;\0&#39;, then stop loop&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    je print_end&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; the part where we print with the BIOS help&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ah&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x0e&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    int &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; &#39;al&#39; already contains the char&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; increment pointer and do next loop&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    add &lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jmp print_start&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;print_end:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    popa&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ret&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h3 id=&#34;以十六进制打印数字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以十六进制打印数字&#34;&gt;#&lt;/a&gt; 以十六进制打印数字&lt;/h3&gt;
&lt;p&gt;同样的道理，我们来将数字以 16 进制打印出来，由于我们直接是直接对接底层 CPU 的处理，没有现成的进制转换函数供我们使用，此时我们需要自己处理进制转换（数字到字符）和格式化输出，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数：通过 &lt;code&gt;dx&lt;/code&gt;  寄存器来传递参数&lt;/li&gt;
&lt;li&gt;预处理：用寄存器来记录需要被转换的值，寄存器为 16 位，每次处理 4 位（一个 16 进制字符），所以要建立一个循环 4 次的函数&lt;/li&gt;
&lt;li&gt;取数字：可以通过和 &lt;code&gt;0x000f&lt;/code&gt;  进行 &lt;code&gt;与操作&lt;/code&gt; 的方式，来仅取出 4 位数，方便后续处理&lt;/li&gt;
&lt;li&gt;进制转换：原数字 + &lt;code&gt;0x30&lt;/code&gt;  就会转换成对应的数字的字符，与 9 做比较，如果更大，就加 7（对应 ascii 表的 &lt;code&gt;A&lt;/code&gt; -&amp;gt; &lt;code&gt;F&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;格式化处理：结合索引，通过移位的方式来将字符放在合适的位置，&lt;/li&gt;
&lt;li&gt;打印：调用上面写的 &lt;code&gt;print()&lt;/code&gt;  函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;wavy&#34;&gt;注意&lt;/span&gt;：字符串在定义时末尾必须加上 &lt;code&gt;0&lt;/code&gt; ，来作为字符串结束的标识（例如 &lt;code&gt;HEX_OUT&lt;/code&gt; ）&lt;/p&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;print_hex( [dx]number n )&lt;/summary&gt;&lt;div&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; receiving the data in &#39;dx&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; For the examples we&#39;ll assume that we&#39;re called with dx=0x1234&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;print_hex:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    pusha&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;cx&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; our index variable&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; Strategy: get the last char of &#39;dx&#39;, then convert to ASCII&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; Numeric ASCII values: &#39;0&#39; (ASCII 0x30) to &#39;9&#39; (0x39), so just add 0x30 to byte N.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; For alphabetic characters A-F: &#39;A&#39; (ASCII 0x41) to &#39;F&#39; (0x46) we&#39;ll add 0x40&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; Then, move the ASCII byte to the correct position on the resulting string  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;print_hex_start:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmp &lt;span class=&#34;token register variable&#34;&gt;cx&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; loop 4 times&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    je print_hex_end&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; 1. convert last char of &#39;dx&#39; to ascii&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;dx&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; we will use &#39;ax&#39; as our working register&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    and &lt;span class=&#34;token register variable&#34;&gt;ax&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x000f&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; 0x1234 -&gt; 0x0004 by masking first three to zeros&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    add &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x30&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; add 0x30 to N to convert it to ASCII &#34;N&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmp &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x39&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; if &gt; 9, add extra 8 to represent &#39;A&#39; to &#39;F&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jle step2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    add &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x07&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; &#39;A&#39; is ASCII 65 instead of 58, so 65-58=7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;step2:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; 2. get the correct position of the string to place our ASCII char&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; bx &amp;lt;- base address + string length - index of char&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;, hex_string &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; base + length&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sub &lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;cx&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; our index variable&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token operator&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;]&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; copy the ASCII char on &#39;al&#39; to the position pointed by &#39;bx&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ror &lt;span class=&#34;token register variable&#34;&gt;dx&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; 0x1234 -&gt; 0x4123 -&gt; 0x3412 -&gt; 0x2341 -&gt; 0x1234&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; increment index and loop&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    add &lt;span class=&#34;token register variable&#34;&gt;cx&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jmp print_hex_start&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;print_hex_end:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; prepare the parameter and call the function&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; remember that print receives parameters in &#39;bx&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;, hex_string&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    popa&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ret&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;hex_string:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    db &lt;span class=&#34;token string&#34;&gt;&#39;0x0000&#39;&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; reserve memory for our new string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;完成以上打印函数后，我们可以将他们保存在 &lt;code&gt;print.nasm&lt;/code&gt;  中，然后通过 &lt;code&gt;%include &amp;quot;boot_print.asm&amp;quot;&lt;/code&gt;  的方式在别的 &lt;code&gt;asm&lt;/code&gt;  中使用我们定义好的打印函数&lt;/p&gt;
&lt;h2 id=&#34;一步登天&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一步登天&#34;&gt;#&lt;/a&gt; 一步登天&lt;/h2&gt;
&lt;p&gt;&lt;s class=&#34;danger&#34;&gt;好了，现在你已经学会 1+1 了，现在请计算 9.121*7.32/6.97 吧&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;根据我们之前说的，仔细想想，编写的 &lt;code&gt;mbr	&lt;/code&gt; 的功能，拆解一下其实并不复杂，本质就是读取一块硬盘，并将 &lt;code&gt;loader&lt;/code&gt;  加载到内存中，然后跳转到 &lt;code&gt;loader&lt;/code&gt;  执行就可以了，稍微复杂的点在于，由于历史原因，读磁盘时采用的是 CHS 的模式，这点也你会在后面更近一步学习，接着往下看吧。&lt;/p&gt;
&lt;p&gt;「以下代码的部分希望读者能自己根据原理完成，如果觉得较为困难，可以打开折叠栏查看」&lt;/p&gt;
&lt;h3 id=&#34;nasm读硬盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nasm读硬盘&#34;&gt;#&lt;/a&gt; nasm 读硬盘&lt;/h3&gt;
&lt;p&gt;好消息是我们无需去直接跟磁盘打交道，bios 中同样写好了读写磁盘的程序，我们只需要跟打印程序一样通过中断来调用即可。我么可以通过&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFuaXNsYXZzLm9yZy9oZWxwcGMvaW50XzEzLTIuaHRtbA==&#34;&gt; 0x13H 中断&lt;/span&gt;来读写磁盘，该中断的调用参数为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Register&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;02H =&amp;gt; bios 磁盘服务程序中的读磁盘程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;要读的扇区个数	(1-128 dec.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;磁道号的低 8 位  (0-1023 dec.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;低 5 位为所读起始扇区号， 6-7 位表示磁道号的高 2 位 (1-17 dec.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所读磁盘的磁头号  (0-15 dec.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;需要进行读操作的驱动器号 (0=A:, 1=2nd floppy, 80h=drive 0, 81h=drive 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ES:BX&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;缓冲区地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;返回值为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Register&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;status  (see INT 13,STATUS)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;number of sectors read&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CF&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0 = successful OR 1 = error&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 mbr 启动的时候，CPU 处于实模式，此时只能使用 bios 按 CHS 的寻址方式来找到 &lt;code&gt;loader&lt;/code&gt;  的位置。&lt;/p&gt;
&lt;details class=&#34;primary&#34;&gt;&lt;summary&gt;CHS到底是什么呢？&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;CHS 即 (Cylinder/Head/Sector)，是非常古老的硬盘参数了，很久以前，硬盘的容量还很小，人们采用类似软盘的结构生产硬盘，即硬盘盘片的每一条磁道都具有相同的扇区数，由此产生了磁头数 (Heads)，柱面数 (Cylinders)，扇区数 (Sectors) 以及相应的寻址方式.&lt;/p&gt;
&lt;p&gt;其中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁头数 (Heads)：表示硬盘总共有几个磁头，也就是有几面盘片，最大为 255  (用 8 个二进制位存储);&lt;/li&gt;
&lt;li&gt;柱面数 (Cylinders)：表示硬盘每一面盘片上有几条磁道，最大为 1023 (用 10 个二进制位存储) =&amp;gt; 每条磁道都有编号，叫做磁道号；&lt;/li&gt;
&lt;li&gt;扇区数 (Sectors)：表示每一条磁道上有几个扇区，最大为  63  (用 6  个二进制位存储).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个扇区一般是  512 个字节，理论上讲这不是必须的，但好象没有取别的值的。&lt;/p&gt;
&lt;p&gt;因此，数据寻址方式为：先找到磁头，然后再通过柱面和扇区来确定唯一一个磁道，磁道中记录了数据。（如果你想了解&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3lsaW5kZXItaGVhZC1zZWN0b3I=&#34;&gt;更多有关早期硬盘的知识&lt;/span&gt;）&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;h4 id=&#34;参数值讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数值讲解&#34;&gt;#&lt;/a&gt; 参数值讲解&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Register&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Value&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Remark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x02&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;要读两个扇区 (根据实际情况)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;仍然是 0 号磁道，只不过是去读第二个扇区)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x02&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;mbr&lt;/code&gt;  总是在 &lt;code&gt;fisrt of cylinder 0 of head 0 of hdd 0 &lt;/code&gt; ，因此任何字节都只能在第二个扇区之后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DH&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读取第一个磁头 (即第一个盘片)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;由 bios 自动设置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们这里先将读磁盘内容的命令封装成一个函数，同时增加一点错误输出函数来帮助我们定位可能存在的错误&lt;/p&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;disk_load([dh]sector n)&lt;/summary&gt;&lt;div&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; load &#39;dh&#39; sectors from drive &#39;dl&#39; into ES:BX&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;disk_load:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		pusha&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		push &lt;span class=&#34;token register variable&#34;&gt;dx&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; store the argument in &#39;dh&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		mov &lt;span class=&#34;token register variable&#34;&gt;ah&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x02&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; 0x02 = &#39;read disk&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		mov &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;dh&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; al &amp;lt;- number of sectors to read (0x01 .. 0x80)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		mov &lt;span class=&#34;token register variable&#34;&gt;cl&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x02&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; cl &amp;lt;- sector (0x01 .. 0x11)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		mov &lt;span class=&#34;token register variable&#34;&gt;ch&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x00&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; ch &amp;lt;- cylinder (0x0 .. 0x3FF, upper 2 bits in &#39;cl&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		mov &lt;span class=&#34;token register variable&#34;&gt;dh&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x00&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; dh &amp;lt;- head number (0x0 .. 0xF)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;; [es:bx] &amp;lt;- pointer to buffer where the data will be stored&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; caller sets it up for us, and it is actually the standard location for int 13h&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    int &lt;span class=&#34;token number&#34;&gt;0x13&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;; BIOS interrupt&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jc disk_error &lt;span class=&#34;token comment&#34;&gt;; if error (stored in the carry bit)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    pop &lt;span class=&#34;token register variable&#34;&gt;dx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmp &lt;span class=&#34;token register variable&#34;&gt;al&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;dh&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;; BIOS also sets &#39;al&#39; to the # of sectors read. Compare it.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jne sectors_error&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    popa&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ret&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;disk_error:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;, DISK_ERROR&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print_nl&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;dh&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;ah&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; ah = error code, dl = disk drive that dropped the error&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print_hex &lt;span class=&#34;token comment&#34;&gt;; check out the code at http://stanislavs.org/helppc/int_13-1.html&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jmp disk_loop&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;sectors_error:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;, SECTORS_ERROR&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;disk_loop:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jmp &lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;DISK_ERROR:&lt;/span&gt; db &lt;span class=&#34;token string&#34;&gt;&#34;Disk read error&#34;&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token label function&#34;&gt;SECTORS_ERROR:&lt;/span&gt; db &lt;span class=&#34;token string&#34;&gt;&#34;Incorrect number of sectors read&#34;&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;此时还没有结束，让我们写一个 &lt;code&gt;main&lt;/code&gt;  函数在将所有之前写的功能串联起来吧，注意这里还有如下几点需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开头要加上 &lt;code&gt;[org 0x7c00]&lt;/code&gt; ，该命令会将后续出现的所有地址在寻址时加上该偏移，因为这里才是 &lt;code&gt;mbr&lt;/code&gt;  真实执行的地址，也即我们各种数据储存的 “基地址”，如果不加的话，在寻址时会出现错误。&lt;/li&gt;
&lt;li&gt;在安全的位置设置我们自己的堆栈&lt;/li&gt;
&lt;li&gt;记得要设置 &lt;code&gt;bx&lt;/code&gt;  寄存器指向 &lt;code&gt;loader&lt;/code&gt;  的加载地址（因为 &lt;code&gt;es:bx&lt;/code&gt;  指向读取出的硬盘数据的存储位置）&lt;/li&gt;
&lt;li&gt;由于我们还没有写 &lt;code&gt;loader&lt;/code&gt; ，可以暂时先将 &lt;code&gt;sector 2&lt;/code&gt;  设置成某特殊字符，来检验读取效果&lt;/li&gt;
&lt;/ul&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;main.asm&lt;/summary&gt;&lt;div&gt;
&lt;figure class=&#34;highlight nasm&#34;&gt;&lt;figcaption data-lang=&#34;NASM&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;[&lt;/span&gt;org &lt;span class=&#34;token number&#34;&gt;0x7c00&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;bp&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x7B00&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; set the stack safely away from us&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;sp&lt;/span&gt;, &lt;span class=&#34;token register variable&#34;&gt;bp&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;bx&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;0x8000&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; es:bx = 0x0000:0x8000 = 0x08000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;dh&lt;/span&gt;, &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; read 2 sectors&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; the bios sets &#39;dl&#39; for our boot disk number&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;; if you have trouble, use the &#39;-fda&#39; flag: &#39;qemu-system-i386 -fda file.bin&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call disk_load&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;dx&lt;/span&gt;, &lt;span class=&#34;token operator&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x8000&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; retrieve the first loaded word, 0xdada&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print_hex&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print_nl&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    mov &lt;span class=&#34;token register variable&#34;&gt;dx&lt;/span&gt;, &lt;span class=&#34;token operator&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x8000&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; first word from second loaded sector, 0xface&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    call print_hex&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    jmp &lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;include &lt;span class=&#34;token string&#34;&gt;&#34;boot_print.asm&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;include &lt;span class=&#34;token string&#34;&gt;&#34;boot_sect_disk.asm&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; Magic number&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;times &lt;span class=&#34;token number&#34;&gt;510&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; (&lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;$&lt;/span&gt;) db &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dw &lt;span class=&#34;token number&#34;&gt;0xaa55&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; boot sector = sector 1 of cyl 0 of head 0 of hdd 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; from now on = sector 2 ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;times &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt; dw &lt;span class=&#34;token number&#34;&gt;0xdada&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; sector 2 = 512 bytes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;times &lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt; dw &lt;span class=&#34;token number&#34;&gt;0xface&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;; sector 3 = 512 bytes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;🎉以上就是本章的全部内容，下一章将会继续讲解 &lt;code&gt;loader&lt;/code&gt;  的实现～&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://gality.cn/os/01-environment/</guid>
            <title>01-环境准备</title>
            <link>https://gality.cn/os/01-environment/</link>
            <category term="操作系统" scheme="https://gality.cn/categories/os/" />
            <category term="从0到1" scheme="https://gality.cn/categories/os/0-1/" />
            <category term="操作系统" scheme="https://gality.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
            <category term="系列长篇" scheme="https://gality.cn/tags/%E7%B3%BB%E5%88%97%E9%95%BF%E7%AF%87/" />
            <category term="二进制基本功" scheme="https://gality.cn/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E6%9C%AC%E5%8A%9F/" />
            <category term="gdb" scheme="https://gality.cn/tags/gdb/" />
            <category term="nasm" scheme="https://gality.cn/tags/nasm/" />
            <category term="qemu" scheme="https://gality.cn/tags/qemu/" />
            <pubDate>Mon, 21 Aug 2023 10:26:23 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;本文章中的所有实践均推荐在 Linux 环境下进行，原因在于 Linux 可以自动处理依赖关系，便捷的完成依赖工具的构建，由于博主主力电脑为 Mac，所以实践环境为 MacOS，但是大体与 Linux 没有区别，以下为默认使用的环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS Ventura 13.4.1 (c) - 英特尔芯片&lt;/li&gt;
&lt;li&gt;qemu  8.0.4&lt;/li&gt;
&lt;li&gt;nasm 2.16.01&lt;/li&gt;
&lt;li&gt;GDB 13.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;&lt;em&gt;Concepts you may want to Google beforehand: linux, mac, terminal, compiler, emulator, nasm, qemu&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;qemu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#qemu&#34;&gt;#&lt;/a&gt; QEMU&lt;/h1&gt;
&lt;p&gt;&lt;ins class=&#34;wavy&#34;&gt;QEMU&lt;/ins&gt;(&lt;strong&gt;Q&lt;/strong&gt;uick &lt;strong&gt;Emu&lt;/strong&gt;lator) 是一款免费且开源的模拟器，他通过动态二进制转换来模拟 CPU，并且提供了一组硬件和设备模型，使他能够运行多种原始操作系统；它还可以通过与 KVM 交互来以接近原生的速度运行虚拟机器。QEMU 同样可以模拟用户态进程，允许应用编译为另外一种架构的应用去运行（&lt;s&gt;人话版本：qemu 就是一个硬件模拟器，用来模拟计算机硬件&lt;/s&gt;）。&lt;/p&gt;
&lt;p&gt;许多从零开始写操作系统的教程均是采用 Bochs 来作为模拟器，qemu 与其相比来说，不仅更加快速，而且提供了更多的调试手段，更加灵活，所以我们选择 qemu 来做硬件模拟。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;p&gt;linux 系统下可以方便的安装 qemu，而 mac 则需要通过 &lt;code&gt;homebrew&lt;/code&gt;  进行安装&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# mac&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brew &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; qemu&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# linux&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; qemu&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;对于 linux 来说，qemu 是以一个整体存在的，也直接通过 &lt;code&gt;qemu&lt;/code&gt;  命令运行 &lt;code&gt;qemu&lt;/code&gt; ，而对于 mac 来说，qemu 会被拆分为多个部分，可以通过补全来看到所有部分：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/4c7nqq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当安装完成后，我们可以通过 &lt;code&gt;qemu-system-i386&lt;/code&gt;  来运行一个 qemu 虚拟机，如果此时你看到了这样一个黑框，那么恭喜你，qemu 就安装完成了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://imgcdn.gality.cn/blog/9qwzxs.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;nasm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nasm&#34;&gt;#&lt;/a&gt; NASM&lt;/h1&gt;
&lt;p&gt;&lt;ins class=&#34;wavy&#34;&gt;NASM&lt;/ins&gt;(&lt;strong&gt;N&lt;/strong&gt;etwide &lt;strong&gt;As&lt;/strong&gt;se&lt;strong&gt;m&lt;/strong&gt;bler ) 是一个汇编器和反汇编器，支持 x86 和 x64，被设计的非常便携和模块化。它支持多种文件类型，包括 Linux and *BSD  &lt;code&gt;a.out&lt;/code&gt; , ELF, Mach-O, 16-bit and 32-bit  &lt;code&gt;.obj&lt;/code&gt;  (OMF) format, COFF (including its Win32 and Win64 variants.) ；还可以输出纯二进制文件，intel hex 和 Motorola S-Record 格式。他的语法被设计的极其简单且易于理解，有点类似于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaW50ZWwuY29tL2NvbnRlbnQvd3d3L3VzL2VuL2RldmVsb3Blci9hcnRpY2xlcy90ZWNobmljYWwvaW50ZWwtc2RtLmh0bWw=&#34;&gt;英特尔软件开发者手册&lt;/span&gt;中的语法但稍微复杂一点；他支持当前所有已知的 x86 架构。&lt;/p&gt;
&lt;h2 id=&#34;安装-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-2&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;强烈建议通过 homebrew 完整安装，尽管 mac 中 Xcode 其实内置了 nasm，但功能有所阉割，可能会在后续过程导致未知错误。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;nasm 的安装也非常简单，可以直接命令安装&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# mac&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brew &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; nasm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# linux&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; nasm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当你使用 &lt;code&gt;nasm -h&lt;/code&gt;  成功打印出帮助信息时，则代表安装完成了。&lt;/p&gt;
&lt;h1 id=&#34;gdb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gdb&#34;&gt;#&lt;/a&gt; GDB&lt;/h1&gt;
&lt;p&gt;现在的 Mac 不默认支持 gdb 了，想要安装 gdb 还需要折腾一番，不过这个折腾绝对是必要的，gdb 可以帮助我们调试操作系统内核甚至是我们马上就会讲到的 bios 代码，在写操作系统的过程中肯定会遇见一些奇奇怪怪的 bug，这种时候我们只有通过调试才能确定问题。&lt;/p&gt;
&lt;h2 id=&#34;安装-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-3&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;p&gt;安装与使用请参考&lt;a href=&#34;https://gality.cn/misc/trail-and-error/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8GDB/&#34;&gt; Mac 下使用 GDB&lt;/a&gt; 和&lt;a href=&#34;https://gality.cn/tools/GDB-with-QEMU/&#34;&gt; GDB+QEMU 调试 mbr/loader&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以上就是我们在后面会用到的所有工具了，qemu 主要负责模拟一个硬件环境给我们写的操作系统去运行，而 nasm 则是帮助我们去将我们写的代码转换成机器码去给硬件执行，gdb 则是帮助我们在出现问题的时候快速 debug，通过这三个工具，我们就可以进行操作系统的编写了🎉🎉🎉&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://gality.cn/os/00-preface/</guid>
            <title>序言-操作系统从0到1</title>
            <link>https://gality.cn/os/00-preface/</link>
            <category term="操作系统" scheme="https://gality.cn/categories/os/" />
            <category term="从0到1" scheme="https://gality.cn/categories/os/0-1/" />
            <category term="操作系统" scheme="https://gality.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
            <category term="系列长篇" scheme="https://gality.cn/tags/%E7%B3%BB%E5%88%97%E9%95%BF%E7%AF%87/" />
            <category term="二进制基本功" scheme="https://gality.cn/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E6%9C%AC%E5%8A%9F/" />
            <category term="系列序言" scheme="https://gality.cn/tags/%E7%B3%BB%E5%88%97%E5%BA%8F%E8%A8%80/" />
            <pubDate>Mon, 21 Aug 2023 09:45:16 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;本章是操作系统从 0 到 1 系列的第一篇文章，主要说明了本系列文章的目标、章节规划、前置知识储备及参考文章；文章编写力求图文丰富、逻辑完备，利用主线把知识串联起来，最终将从 0 到 1 实现一个操作系统所需要的知识都有机结合起来。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;其实本科阶段在学习操作系统的时候就有跟着清华大学的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2tpdWtvdHN1L3Vjb3Jl&#34;&gt; ucore 项目&lt;/span&gt;，当时感觉学到了很多，但由于 ucore 是补充关键代码而非从真正意义上的 0 开始写一个操作系统，时至今日，细节已经完全模糊了，这是本系列产生的第一个原因。&lt;/p&gt;
&lt;p&gt;第二个原因也在于，之前在看 sakura 师傅的知乎问答时看到关于打基础的内容，提到了：&amp;quot;自己写一个操作系统，并用自己的写的编译器来编译一个程序&amp;quot;，又唤起了我之前的雄心，此时此刻，正适合有一个系列来记录这个过程，于是，&lt;span class=&#34;rainbow&#34;&gt;Boooooom！&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目标&#34;&gt;#&lt;/a&gt; 目标&lt;/h1&gt;
&lt;p&gt;网上已经存在一些非常成熟的教程了，但可能或多或少都有一点点过时，软件版本的巨大变动使得过去教程中的一些东西可能有些过时（指的是工具部分，而非理论部分），这是我希望解决的第一个问题；同时我还希望能做到以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用丰富的图片去解析原理，用足够的资料去支撑理论。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该系列将尽可能详细的对原理和实践进行解释，如果你仍然有疑问，欢迎评论，我会在看到后及时回复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终实现一个微型操作系统，并在其上运行自己实现的编译器去编译运行一个程序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;章节规划&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#章节规划&#34;&gt;#&lt;/a&gt; 章节规划&lt;/h1&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;非最终版，在系列结束后本部分会更新成确定版本&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;🎉🎉本系列的所有文章可以通过左手侧边栏中的系列文章索引进行快速到达～&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;序言&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gality.cn/os/01-environment/&#34;&gt;环境准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gality.cn/os/02-bios/&#34;&gt;BIOS 启动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GDT 与保护模式&lt;/li&gt;
&lt;li&gt;虚拟内存实现&lt;/li&gt;
&lt;li&gt;加载并进入 kernel&lt;/li&gt;
&lt;li&gt;显示与打印&lt;/li&gt;
&lt;li&gt;全局描述符表 GDT&lt;/li&gt;
&lt;li&gt;中断处理&lt;/li&gt;
&lt;li&gt;虚拟内存完善&lt;/li&gt;
&lt;li&gt;实现堆和 malloc&lt;/li&gt;
&lt;li&gt;第一个 kernel 线程&lt;/li&gt;
&lt;li&gt;多线程切换&lt;/li&gt;
&lt;li&gt;锁于多线程同步&lt;/li&gt;
&lt;li&gt;进入用户态&lt;/li&gt;
&lt;li&gt;系统调用&lt;/li&gt;
&lt;li&gt;简单文件系统&lt;/li&gt;
&lt;li&gt;加载可执行文件&lt;/li&gt;
&lt;li&gt;键盘驱动&lt;/li&gt;
&lt;li&gt;运行 shell&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;前置知识储备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前置知识储备&#34;&gt;#&lt;/a&gt; 前置知识储备&lt;/h1&gt;
&lt;p&gt;操作系统本身就比较复杂，想自己实现操作系统并运行更需要很多其他的知识，这些知识中关于操作系统原理部分的知识会详细讲解，但涉及到工具的部分（模拟工具，编译工具等等）就不会过多的深入，只会讲一点于实现操作系统有关的部分，一切为主线服务。&lt;/p&gt;
&lt;p&gt;如果你已经具备以下知识，那么你可能可以较为轻松的接受本系列所讲知识，并将主要精力放在代码实践上，而如果你不是很了解以下知识，其实也没关系，不明白了就去搜索学习就好，带着问题学知识本身就是一种很好的学习方式，这些知识包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C 语言能力&lt;/li&gt;
&lt;li&gt;一点 x86 汇编能力（可以在项目中提高）；&lt;/li&gt;
&lt;li&gt;熟练使用 Linux 系统，以及 Linux 下的系统编程经验；&lt;/li&gt;
&lt;li&gt;gcc，Makefile 等工具的使用；&lt;/li&gt;
&lt;li&gt;对编译，链接，执行代码的原理有足够的认识；&lt;/li&gt;
&lt;li&gt;硬件以及 OS 对内存的管理原理，尤其是虚拟内存；&lt;/li&gt;
&lt;li&gt;程序在操作系统中的加载，执行过程，内存的使用和分布；&lt;/li&gt;
&lt;li&gt;中断的概念和处理；&lt;/li&gt;
&lt;li&gt;进程，线程的概念及原理；&lt;/li&gt;
&lt;li&gt;多线程编程，同步与锁的概念；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考文章&#34;&gt;#&lt;/a&gt; 参考文章&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3J1aWVycy9vcy10dXRvcmlhbC1jbi90cmVlL2NoaW5lc2U=&#34;&gt;https://github.com/ruiers/os-tutorial-cn/tree/chinese&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDA0MDEyNDY1MA==&#34;&gt;https://segmentfault.com/a/1190000040124650&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aWtpLm9zZGV2Lm9yZy9NYWluX1BhZ2U=&#34;&gt;https://wiki.osdev.org/Main_Page&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NmZW5vbGxvc2Evb3MtdHV0b3JpYWw=&#34;&gt;https://github.com/cfenollosa/os-tutorial&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://gality.cn/daily/DailyRecord/</guid>
            <title>九天揽月</title>
            <link>https://gality.cn/daily/DailyRecord/</link>
            <category term="日常" scheme="https://gality.cn/categories/daily/" />
            <pubDate>Thu, 17 Aug 2023 12:19:28 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info no-icon-with-header&#34;&gt;
&lt;h1 id=&#34;dig-deeper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dig-deeper&#34;&gt;#&lt;/a&gt; &lt;ins class=&#34;danger&#34;&gt;Dig Deeper&lt;/ins&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;😁 记录不追求形式，以最舒服的方式进行记录即可。&lt;/li&gt;
&lt;li&gt;🗺️ 每天在总结时要总结所学内容在整体中的位置，不能只是闷着头只做知识储备。&lt;/li&gt;
&lt;li&gt;🧐 及时记录迸发的想法，哪怕无果而终，也要留有痕迹。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h1 id=&#34;daily-record&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#daily-record&#34;&gt;#&lt;/a&gt; Daily Record&lt;/h1&gt;
&lt;h2 id=&#34;2023-第39周&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2023-第39周&#34;&gt;#&lt;/a&gt; 2023 - 第 39 周&lt;/h2&gt;
&lt;h3 id=&#34;919-920&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#919-920&#34;&gt;#&lt;/a&gt; 9.19-9.20&lt;/h3&gt;
&lt;p&gt;上课 &amp;amp; 找论文资料，经过一番搜索初见端倪，大概理解授时技术到底是在干嘛了，关键词也从 &lt;code&gt;PNT timing security&lt;/code&gt;  -&amp;gt;  &lt;code&gt;time protocol security&lt;/code&gt;  -&amp;gt;  &lt;code&gt;timing synchronization security&lt;/code&gt; ，基本找到想要的内容了。&lt;/p&gt;
&lt;p&gt;另外还完成了操作系统第四篇文章的代码 Debug，只能说，因为 include 顺序导致的编译错误这种 bug 真的想象不到，还浪费时间，可恶！&lt;/p&gt;
&lt;h3 id=&#34;918&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#918&#34;&gt;#&lt;/a&gt; 9.18&lt;/h3&gt;
&lt;p&gt;非常充实的一天，忙到 12 点才睡，上了一天课，又抽时间帮学弟学妹们完成了面试复盘，明天开始正式迈入科研生活，任务：寻找论文资料并完成研究现状、安全挑战两块内容。&lt;/p&gt;
&lt;h2 id=&#34;2023-第38周&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2023-第38周&#34;&gt;#&lt;/a&gt; 2023 - 第 38 周&lt;/h2&gt;
&lt;h3 id=&#34;915&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#915&#34;&gt;#&lt;/a&gt; 9.15&lt;/h3&gt;
&lt;p&gt;继续被上课和预算填满，抽时间继续更新了资源导引页，新增了「搜寻学习资源」的类目，这里面的网站真是我不愿说出的信息差，不过呢，即然都说了「开发共享」，又怎么能有所保留呢？&lt;/p&gt;
&lt;p&gt;同样给自己留一个思考题：目前本页的更新中，由于每天记录内容其实很短，反倒是标题占用了大多数的空间，信噪比太低了，要考虑要不要优化一下格式了。&lt;/p&gt;
&lt;h3 id=&#34;914&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#914&#34;&gt;#&lt;/a&gt; 9.14&lt;/h3&gt;
&lt;p&gt;上课！好多课！其余时间都在整资源页，终于小具规模，还是很有成就感的，希望能帮助到一些人，这里补一下想做但还没有做的分类：图书推荐、安全资讯平台汇总、赚点外快....（暂时先这么多）&lt;/p&gt;
&lt;h3 id=&#34;913&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#913&#34;&gt;#&lt;/a&gt; 9.13&lt;/h3&gt;
&lt;p&gt;上午上课加忙预算，下午完成了 Mac 下 gdb 的安装，真不戳～&lt;/p&gt;
&lt;h3 id=&#34;912&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#912&#34;&gt;#&lt;/a&gt; 9.12&lt;/h3&gt;
&lt;p&gt;一整天都在重新调整整个预算表格的格式，估计是要熬夜才能改完了 Orz&lt;/p&gt;
&lt;h3 id=&#34;911&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#911&#34;&gt;#&lt;/a&gt; 9.11&lt;/h3&gt;
&lt;p&gt;上了整天课，课上又没发干自己的事，完全没有时间做其他的事情🥺&lt;/p&gt;
&lt;h2 id=&#34;2023-第37周&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2023-第37周&#34;&gt;#&lt;/a&gt; 2023 - 第 37 周&lt;/h2&gt;
&lt;h3 id=&#34;99-910&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#99-910&#34;&gt;#&lt;/a&gt; 9.9-9.10&lt;/h3&gt;
&lt;p&gt;周末好好玩～&lt;/p&gt;
&lt;h3 id=&#34;98&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#98&#34;&gt;#&lt;/a&gt; 9.8&lt;/h3&gt;
&lt;p&gt;Debug 中，操作系统好难调试，没有办法进行指令调试，只能插值来调试，去了解下怎么用 qemu 做调试？留个小任务，去学着调试下吧。&lt;/p&gt;
&lt;h3 id=&#34;97&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#97&#34;&gt;#&lt;/a&gt; 9.7&lt;/h3&gt;
&lt;p&gt;终于有时间做自己的事情了，上午修复了一下博客的评论 bug，为静态资源配置了 cdn 加速；下午看了会儿塔式服务器（万一用上呢！），然后继续修改部分预算问题并继续进行操作系统的更新，完成了保护模式的部分。&lt;/p&gt;
&lt;h3 id=&#34;96&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#96&#34;&gt;#&lt;/a&gt; 9.6&lt;/h3&gt;
&lt;p&gt;上午完成了预算的初稿，下午去找了财务的老师核对各项问题，晚上还挺有状态的完成了操作系统的 &lt;code&gt;GDT&lt;/code&gt;  和保护模式的部分内容，还不错～明天要把～～ &lt;code&gt;loader&lt;/code&gt; ~~ 保护模式写完进入虚拟内存的章节啦&lt;/p&gt;
&lt;h3 id=&#34;94-95&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#94-95&#34;&gt;#&lt;/a&gt; 9.4-9.5&lt;/h3&gt;
&lt;p&gt;预算工作第一版接近尾声，一定要把第一版写完，明天开始继续操作系统&lt;/p&gt;
&lt;h2 id=&#34;2023-第35-36周&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2023-第35-36周&#34;&gt;#&lt;/a&gt; 2023 - 第 35-36 周&lt;/h2&gt;
&lt;h3 id=&#34;92-93&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#92-93&#34;&gt;#&lt;/a&gt; 9.2-9.3&lt;/h3&gt;
&lt;p&gt;周末基本在学校活动、应酬、改预算之间度过，操作系统 0...&lt;/p&gt;
&lt;h3 id=&#34;91&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#91&#34;&gt;#&lt;/a&gt; 9.1&lt;/h3&gt;
&lt;p&gt;操作系统进度缓慢，明天尽量把预算弄完，然后好好学操作系统吧&lt;/p&gt;
&lt;h3 id=&#34;831&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#831&#34;&gt;#&lt;/a&gt; 8.31&lt;/h3&gt;
&lt;p&gt;接触了点项目预算编写的知识并编写了一份财务预算说明书，抽了一点时间给操作系统的第四篇文章开了点头，希望两天内能完成第四章吧，加油！&lt;/p&gt;
&lt;h3 id=&#34;830&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#830&#34;&gt;#&lt;/a&gt; 8.30&lt;/h3&gt;
&lt;p&gt;开学报道～参观了一下学校，体验了食堂，还是很不戳的～&lt;/p&gt;
&lt;h3 id=&#34;827-829&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#827-829&#34;&gt;#&lt;/a&gt; 8.27-8.29&lt;/h3&gt;
&lt;p&gt;又是当懒狗的一天，摆了很长时间，好在迷途知返，抽了点时间看操作系统～&lt;/p&gt;
&lt;h3 id=&#34;825-826&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#825-826&#34;&gt;#&lt;/a&gt; 8.25-8.26&lt;/h3&gt;
&lt;p&gt;抽空回家进行了各种档案工作，陪陪家人，基本摸不到电脑...&lt;/p&gt;
&lt;p&gt;不过还是利用一点点时间把操作系统第 3 章完成了✌️&lt;/p&gt;
&lt;h3 id=&#34;824&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#824&#34;&gt;#&lt;/a&gt; 8.24&lt;/h3&gt;
&lt;p&gt;难得休息，打了打游戏，出去应酬了一圈，就没有进行学习任务 (爽～&lt;/p&gt;
&lt;h3 id=&#34;823&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#823&#34;&gt;#&lt;/a&gt; 8.23&lt;/h3&gt;
&lt;p&gt;&lt;s class=&#34;danger&#34;&gt;终于，项目结束了，可以好好休息一下了，幸福到流泪😭&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;上午完成了 baidu、google、bing 的 SEO 索引，等待一天时间就可以看分析数据了，可以通过改善关键字来提升 SEO 排名，既然准备好好经营，为什么不让更多人看到呢😊&lt;/p&gt;
&lt;p&gt;&lt;s&gt;必须吐糟一下，baidu 的这个站长工具真的垃圾，google 3 分钟就配好了，就这个百度，用站长工具还需要实名认证，实名认证就算了，还需要扫脸，牛&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;下午接着完成 &lt;code&gt;mbr&lt;/code&gt;  编写的剩余部分的内容，还是剩一点点小尾巴没有完成，有一点点可惜，留着明天完成吧～😁&lt;/p&gt;
&lt;h3 id=&#34;822&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#822&#34;&gt;#&lt;/a&gt; 8.22&lt;/h3&gt;
&lt;p&gt;整体效率还行，完成了博客的 aligolia 的搜索配置，完成了操作系统从 0 到 1 的第二篇文章，第三篇开了个头，使用 figma 作为画图工具还是有些大材小用了，浪费了点时间，需要找一个功能更简单、更便捷的画图工具！&lt;/p&gt;
&lt;h3 id=&#34;821&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#821&#34;&gt;#&lt;/a&gt; 8.21&lt;/h3&gt;
&lt;p&gt;今天效率极低，只完成了操作系统序言部分的编写还大多都是借鉴别佬的，感觉稍微有点浮躁，没有沉下心，倒是听了很多财经的科普 hhh，明天要调整下状态好好学技术～&lt;/p&gt;
&lt;h2 id=&#34;2023-第34周&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2023-第34周&#34;&gt;#&lt;/a&gt; 2023 - 第 34 周&lt;/h2&gt;
&lt;h3 id=&#34;820&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#820&#34;&gt;#&lt;/a&gt; 8.20&lt;/h3&gt;
&lt;p&gt;继续处理博客的遗留问题，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;精选分类封面图片无法加载&lt;/li&gt;
&lt;li&gt;主题特殊样式学习&lt;/li&gt;
&lt;li&gt;主题样式的一点点 bug 的修复&lt;/li&gt;
&lt;li&gt;comment 表情包引入&lt;/li&gt;
&lt;li&gt;默认模版更新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实都是小问题，中间由于要调 bug，也去学习了一点 &lt;code&gt;Nunjunks&lt;/code&gt;  和 &lt;code&gt;stylus&lt;/code&gt;  语法，对于 hexo 的实现和现在使用的主题的实现都有了一定了解，可以更好 DIY 了😁&lt;/p&gt;
&lt;p&gt;对于博客的改动基本进入尾声了，之前预留的待踩坑项也都完成的七七八八了，后面就要注重内容的填充了，冲！&lt;/p&gt;
&lt;h3 id=&#34;818-819&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#818-819&#34;&gt;#&lt;/a&gt; 8.18-8.19&lt;/h3&gt;
&lt;p&gt;虽然是偷偷摸摸，但终算有点时间打理一下博客，完成了博客配色的改变、评论管理系统搭建、图床的适配等等，基本将博客的整体架子搭出来了，后面就算再加，也只是功能的完善、调整或新增。现在其实更重要的是把博客的内容丰富起来了，加油！&lt;/p&gt;
&lt;p&gt;今天反思了一下过去写博客的经历，仔细想想其实之前也有过坚持日更坚持一年的情况，但是随着电脑的更换、服务器的到期最终连记录都已经找不到了，确实有点可惜，希望这次依托 github 可以将数据永久保留，使得我可以再走了很久之后可以回头看看自己来时的路。&lt;/p&gt;
&lt;h3 id=&#34;817&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#817&#34;&gt;#&lt;/a&gt; 8.17&lt;/h3&gt;
&lt;p&gt;情况稍有转机，工作内容有了变化，可以使用自己的电脑了，做了 4 个 1day 的漏洞复现，也算是有些收获吧，顺便开始回忆起了一点点 web 手的记忆 hhh~&lt;/p&gt;
&lt;h3 id=&#34;814-816&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#814-816&#34;&gt;#&lt;/a&gt; 8.14-8.16&lt;/h3&gt;
&lt;p&gt;本来雄心壮志且状态在线的立刻开始记录每日的学习，但实际上却被外部条件无奈的阻止了，迫不得已暂时停止开始坐牢...&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://gality.cn/ponder/%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</guid>
            <title>科技协会面试反思与总结</title>
            <link>https://gality.cn/ponder/%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</link>
            <category term="思考与沉淀" scheme="https://gality.cn/categories/ponder/" />
            <category term="思考" scheme="https://gality.cn/tags/%E6%80%9D%E8%80%83/" />
            <pubDate>Mon, 14 Aug 2023 16:02:17 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;本篇文章只是我结合了自己两年面试 + 两年旁听的经历的一些思考与总结，中间可能有些想法并不准确，只是希望能有抛砖引玉的作用，能引发学弟学妹们的一些思考；如果你在看的过程中对任何想法有所质疑，欢迎在评论区中留言讨论👏&lt;/p&gt;
&lt;p&gt;为了尽量对一些想法做出没有歧义的解释，部分内容的论述稍显冗余，如果你可以很容易的理解我想说的，那就下一条吧！理解万岁🎉&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;🎯 总的来说，我认为对于 SIPC 的面试官而言，应该做到以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;明确对面试的认知，摆正心态，能动的设计流程和问题，注重问题的深度而非广度。&lt;/li&gt;
&lt;li&gt;帮助面试者挖掘自身实力与优势，尽量屏蔽因紧张、社恐导致的发挥失常。&lt;/li&gt;
&lt;li&gt;注重挖掘面试者的「真实水平」，不要把重心放在问题是否正确回答了，而应该注重回答的过程，以及隐藏在其下的思考问题的逻辑。&lt;/li&gt;
&lt;li&gt;精心设计题目难度与提问方式，注重引导面试者思考问题。&lt;/li&gt;
&lt;li&gt;因人而异的设置面试策略和评价标准，根据个人特点调整 Task 任务策略。&lt;/li&gt;
&lt;li&gt;从技术和团队的两方面来考虑面试者，诚然有些人技术非常优秀，但可能并不太适合团队合作或 SIPC，So～&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h1 id=&#34;理念篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#理念篇&#34;&gt;#&lt;/a&gt; 理念篇&lt;/h1&gt;
&lt;h2 id=&#34;面试认知&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试认知&#34;&gt;#&lt;/a&gt; 面试认知&lt;/h2&gt;
&lt;p&gt;在所有讨论之前，我想先说下对于面试的认知，希望能给面试官一点启发，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面试的目的是为了深入了解面试者，而非难倒面试者。&lt;/li&gt;
&lt;li&gt;面试官其实是 “服务者”，面试的目的是帮助面试者展现他们的优势。&lt;/li&gt;
&lt;li&gt;面试并非轻松的按流程提问，而是需要消耗大量脑力去对问题进行精心设计，进而达到我们了解面试者的目的。&lt;/li&gt;
&lt;li&gt;要注重差异性，对于不同的面试者采取不同的提问策略和评价标准。&lt;/li&gt;
&lt;li&gt;科协的面试官其实是与面试者共同成长的，要在心态上摆正位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;思想上的认识是最为重要的，因此以上几点在后面还会反复提及。&lt;/p&gt;
&lt;p&gt;我想说的是，各位面试官能最终进入 SIPC，都是非常优秀的，本身就是一种能力的证明，我们不应该死板的套公式去面试，而应该充分解放思想，抓住我们面试的核心目的，所有流程、规范都是为「&lt;strong&gt;深入了解面试者&lt;/strong&gt;」这个核心服务的，也就是说，只要能达到这个目的，采用什么样的手段其实并不重要。&lt;/p&gt;
&lt;h2 id=&#34;两轮面试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两轮面试&#34;&gt;#&lt;/a&gt; 两轮面试&lt;/h2&gt;
&lt;p&gt;在科技协会历来的传统中（至少从我开始），整体包括两轮面试，那么为什么安排两轮面试？以及每轮面试中面试官需要重点侧重于哪方面的考察？这些问题是我们应该思考的。以下我们详细谈谈。&lt;/p&gt;
&lt;p&gt;在我个人的理解中，两轮面试的好处如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两轮面试侧重方面不同，帮助全方位的、可信的考察面试者。&lt;/li&gt;
&lt;li&gt;尽量排除一次面试中可能出现的各种人为因素。&lt;/li&gt;
&lt;li&gt;通过两轮面试中的时间差确定面试者短期学习能力和时间规划能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来我们分点来详细论述：&lt;/p&gt;
&lt;h3 id=&#34;不同的侧重&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不同的侧重&#34;&gt;#&lt;/a&gt; 不同的侧重&lt;/h3&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;我个人认为在一轮面试中需要侧重面试者画像建构，二轮面试中侧重面试者画像验证；两轮面试其实是前后相承的，二者顺序不可调换，虽然可以二合一，但是这样效果可能并不太好。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们从两轮面试中不同的面试形式说起，在我们这一届中，一面的形式采用 &lt;code&gt;面试&lt;/code&gt;  + &lt;code&gt;一点点的题目考查&lt;/code&gt; ；二面的形式采用 &lt;code&gt;无领导讨论&lt;/code&gt;  + &lt;code&gt;代码测试&lt;/code&gt;  + &lt;code&gt;面试&lt;/code&gt; 的形式。这两种形式中其实就体现了两轮面试侧重点的不同了。&lt;/p&gt;
&lt;h4 id=&#34;面试者画像建构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试者画像建构&#34;&gt;#&lt;/a&gt; 面试者画像建构&lt;/h4&gt;
&lt;p&gt;为了准确建构面试者画像，在第一轮面试中我们需要做到两件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定 C 语言真实水平&lt;/li&gt;
&lt;li&gt;对综合素质进行考察与记录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C 语言的考察只是为了测试面试者是否真实的达到了他完成的 Task 的水平，所以我会注重 C 语言&lt;strong&gt;基础知识&lt;/strong&gt;的考察，只要确定出 C 语言真实水平即可；在测试出真实水平的同时，也可以侧面看出面试者对于对于学习知识的态度，到底是急匆匆的学习新知识？还是稳扎稳打的前进？还是学不会一个知识点就不前进？这几者在我的观念中，这几者其实并没有显著优势的学习方案，但是我们必须了解到这点，并帮助面试者进行相应的调整。&lt;/p&gt;
&lt;p&gt;但是，其实就算是没有 C 语言进度也是无所谓的，在一面中，我是可以接受面试者仅仅是刚刚接触 C 语言甚至是还没有进行 C 语言学习（当然，面试者必须能够说明自己态度是端正的）。刚经历了高考的折磨，在高三的暑假中好好玩一下又有什么不好呢？0 基础并不影响一个人的优秀，就像有基础也不代表一定会被录取😊，但是如果我发现了面试者试图欺骗我，那么不好意思，这个会很扣分。&lt;/p&gt;
&lt;p&gt;但但是，其实 C 语言的分数占比挺小的（欺骗除外），大概会占 20%-30% 左右。我会更加侧重于对面试者的性格、目标、时间规划、逻辑能力等&lt;strong&gt;综合素质&lt;/strong&gt;进行考察。其实就是是聊天啦，一方面可以一定程度上消除面试者的紧张感，另外一方面这种开放式的问题非常考察综合素质；这一点我发现学弟学妹们也会有相应的题库，但是对于回答到底应该 &lt;code&gt;听什么&lt;/code&gt; 、 &lt;code&gt;怎么听&lt;/code&gt; 以及 &lt;code&gt;怎么追问&lt;/code&gt; 上还是欠缺思考，这点我在后面章节会详细讨论。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总的来说&lt;/strong&gt;，一轮面试中面试官做的更多的是信息的搜集工作，在这个过程中我们可以通过对一些问题的回答来进行交叉对比和逻辑推演，进而识别一些掩饰或谎言；但我们在这个阶段更重要的工作是尽可能详细的建构面试者的真实画像并记录下来，以方便在二面中进行针对性的提问和验证。这并不是说在一轮面试中不会刷掉任何人，某些态度不端、品行不端、理念不合的人趁早刷掉就好。&lt;/p&gt;
&lt;h4 id=&#34;面试者画像验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试者画像验证&#34;&gt;#&lt;/a&gt; 面试者画像验证&lt;/h4&gt;
&lt;p&gt;了解到现在的二面中已经没有了无领导讨论环节，那么对于一面中建构的综合素质画像就无法很好的验证，但这一点其实也还好，可以通过采用初期培训过程中学长学姐与小组配对的形式，通过学长学姐对小组的观察进行判断；另外，素质考察并不是二面的侧重点，在二面中就需要侧重对技术能力的考察（当然，我们本质其实看的是学习能力），毕竟我们是一个以技术能力作为核心竞争力的组织。&lt;/p&gt;
&lt;p&gt;所以，在二面 C 语言考察中，就可以稍微涉及一些&lt;strong&gt;相对&lt;/strong&gt;比较偏的知识点了，但这里我要强调，我们出题的目的不是为了得到正确的答案，而是听面试者思考的过程，所以我们不能只是在听到面试者回答出正确 / 错误答案后，一句：” 不错 / 下去再了解下吧 “就完事了，对于正确答案，我们要进一步追问:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么是这样？&lt;/li&gt;
&lt;li&gt;答案的依据是什么？&lt;/li&gt;
&lt;li&gt;那如果变一下还成立吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于回答不出来或错误答案的情况，我们需要引导面试者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你仔细想想 xxx（前置知识）是怎么样的？&lt;/li&gt;
&lt;li&gt;没关系，说说你的思路吧！&lt;/li&gt;
&lt;li&gt;如果我告诉你 xx（可能的疑难点或记忆点）是这样的，那么你有思路吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意这里我用了相对两字，如果是太偏的知识点其实是没有意义的，哪怕面试者说不出来又能怎样呢？我们也无法判断他到底是否优秀，所以，作为面试官，一定要精心的设计题目的难度和知识点范围，可以通过&lt;strong&gt;组合知识点&lt;/strong&gt;来增加难度，而不要去追着一些偏门的知识进行询问，这样才能得到有意义的回答。&lt;/p&gt;
&lt;p&gt;在验证面试者技术能力的时候一定要与一面中构建的画像进行比对，进而构建二面的问题。例如，对于一个基础不牢的面试者，我们在一面中留的任务是好好复习一下已经学过的内容，那么我们就需要在二面中对于基础知识进行重点考察，观察面试者能否在我们的指导下克服自己的劣势面，这不仅是学习能力的证明，同样也是有无成长可能的证明。通过对每个人的问题的精心设计，我们也可以去验证该面试者在一面中对于自己的评价是否可信，只有通过了交叉对比，我们才算是完成了面试者画像的构建与验证，如果无法通过，我们就要及时修正我们的画像，再去考量该面试者是否通过。&lt;/p&gt;
&lt;h3 id=&#34;排除人为因素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#排除人为因素&#34;&gt;#&lt;/a&gt; 排除人为因素&lt;/h3&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;要尽可能客观公正的评价每一位面试者，摒除面试中人为因素的影响；同时要记住，面试官是与面试者一同成长的关系！&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在面试中，影响面试结果的人为因素来源于两方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面试官的个人因素&lt;/li&gt;
&lt;li&gt;面试者的个人因素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于面试官来说，第一点是：人都会对与自己经历相似的人有天然的好感、容易沉溺于夸赞，同样也会对某些人有天然的厌恶。人是一种极其主观的生物，对于事物的评价受主观因素影响很大，为了避免这种情况，通过较为轻松的标准 + 两次面试可以一定程度上的规避因强烈的个人情感导致的不公平现象，当然，一组面试官中有多个人的原因也是如此。&lt;/p&gt;
&lt;p&gt;第二点是：有些面试官可能在面试过程中非常的严肃，或者由于面试官自身的表达原因无法准确的描述问题，都会对面试产生影响，从这一点上来说对于面试者也是有些不公平的。就我们自己而言，我们是需要在每一场面试中不断去反思自己的：提的问题是否有更准确的表达？态度能否更和善？...... 其实对于 SIPC 的面试官而言，要&lt;strong&gt;记得感谢面试者&lt;/strong&gt;，因为我们其实是在这个面试的过程中共同成长，而非只是单纯的面试筛选，面试官其实本身也不够成熟，面试者会触发我们&lt;strong&gt;对于技术的思考总结&lt;/strong&gt;，我们自己&lt;strong&gt;对未来的规划&lt;/strong&gt;、&lt;strong&gt;沟通表达能力的提升&lt;/strong&gt;以及&lt;strong&gt;对于 “显而易见问题” 的重新思考&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而对于面试者而言，在一次面试中可能会因为各种意外情况导致发挥失常，有些意外并非自己能够控制的，所以进行两次面试也可以最大程度上帮助面试者调整状态，熟悉面试感觉，展现出最好的自己。&lt;/p&gt;
&lt;p&gt;为了&lt;strong&gt;尽可能消除面试官的个人影响&lt;/strong&gt;，我建议在面试中采用如下顺序进行问题询问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C 语言技术问题&lt;/li&gt;
&lt;li&gt;综合素质问题&lt;/li&gt;
&lt;li&gt;对 SIPC 认知问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将可能对于个人倾向有影响的问题放在最后去问，使得我们更容易认真倾听并冷静分析面试者说的话。&lt;/p&gt;
&lt;h3 id=&#34;判断学习与规划能力&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断学习与规划能力&#34;&gt;#&lt;/a&gt; 判断学习与规划能力&lt;/h3&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;对于大学生来说，时间规划能力与学习能力其实直接相关，由于本科有大量的课必须要上，能否在紧张的课业中合理安排时间进行技术学习是非常重要的；同时要注意，特殊个体特殊对待，有时我们要有足够的耐心。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这一点我觉得应该不用进行太深的讨论，大家应该都明白，要关注一面到二面之间的成长，而不要做绝对学习进度的对比。但这里我想强调另外一点：&lt;strong&gt;要结合个人的经历、性格去评判成长的大小&lt;/strong&gt;。举个例子，对于从小接触计算机编程的面试者，他们学习 C 语言的速度就会快一些，而如果是有些同学从小从来没有接触过计算机，那么学习 C 语言肯定会慢一些，所以要动态的衡量学习的快慢而非制定绝对标准。&lt;/p&gt;
&lt;p&gt;在过往的面试中，我们经常遇见一种情况：面试者在过去除了计算机课就没碰过电脑，再加上自身性格比较内向，有时候说话可能都听不清，看起来整体分数并不高。但是&lt;strong&gt;事实证明&lt;/strong&gt;了只要给这样的同学一点时间，他们反倒会比大多数人要优秀。所以我们在面试过程中，要对于这样的面试者给予额外的耐心，多给他们一些时间，再去看看他们的反馈，你可以就会大吃一惊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当然&lt;/strong&gt;，对不同的人采用不同的评价标准对于每个人而言并不绝对公平，所以这句话只是针对进入科协的两轮面试而言，而对于后面的科协大考核，必须是制定统一的评价标准的。&lt;/p&gt;
&lt;h1 id=&#34;问题篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题篇&#34;&gt;#&lt;/a&gt; 问题篇&lt;/h1&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;问问题的目的是通过差异化的问题帮助面试者正常甚至超常发挥，来确定不同面试者的真实水平，既不是完成面试流程中的任务、也不是非难倒所有面试者来证明我们优秀。&lt;/p&gt;
&lt;p&gt;为什么要先写理念篇，就是因为我们在面试时一定是在理念的指引下灵活的面试。在设计面试问题的时候一定要能动的去思考我们面试的目的，要想明白我们组织一面、二面是为了什么，去思考我们问的问题能不能达到我们的目的&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在多次的旁听中发现了学弟学妹们，尤其是大二的学弟学妹们做主面的时候，对于问题的提问和设计有所欠缺，这个问题非常的普遍，而且又比较具体，我会按照重要程度依次来罗列需要注意的点。&lt;/p&gt;
&lt;h2 id=&#34;问的深而非问的广&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问的深而非问的广&#34;&gt;#&lt;/a&gt; 问的深而非问的广&lt;/h2&gt;
&lt;p&gt;先来说说问的广而不是问的深的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问不出面试者的真实水平&lt;/li&gt;
&lt;li&gt;很难了解面试者的综合素质&lt;/li&gt;
&lt;li&gt;面试者很难呈现自己的优势&lt;/li&gt;
&lt;li&gt;很难获得有价值的反馈&lt;/li&gt;
&lt;li&gt;面试官很难判断信息的真伪&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在旁听的过程中，问问题流于表面、广而不深的问题非常的严重，绝大多数学弟学妹们在面试过程中太过于死板的按照流程询问：一道 C 语言、一道技术栈、一道规划...... 面试者有很多有价值继续追问的问题都被忽略了。我极其讨厌这种按照现成的规章制度、不在实际情况的基础上做出修改就照搬照抄的做法，在我看来，这就是 &amp;quot;&lt;strong&gt; 懒&lt;/strong&gt; &amp;quot;，而且，是头脑的 “&lt;strong&gt;懒&lt;/strong&gt;”。诚然，规范的流程可以提醒我们还有哪些东西没有问到，但是按照流程均匀的分配时间给每一个流程的问题根本就是不动脑子。&lt;/p&gt;
&lt;p&gt;一定要抓住一条主线：&lt;strong&gt;我们是为了深入的了解面试者而提问，而不是为了流程而提问&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们的困境在于：如何在一个极短的时间内，深入的了解面试者。时间短这件事其实本身就意味着想要全面的了解面试者是一种奢望，与其将时间分配在流程上那些无关痛痒的问题上，为什么不把时间全部用来了解你想要了解的东西呢？规范的流程只是参考，而非一定，&lt;strong&gt;不要让思想懒惰&lt;/strong&gt;，找到你感兴趣的点不断追问，这个过程反倒会帮助你更深入的了解面试者。&lt;/p&gt;
&lt;p&gt;这里举一个例子：在曾经的面试中，面试者自我介绍时提到了爱好英雄联盟，这个说法大家应该很常见吧，一般情况下我也不会追着这点问，但是情况的特殊在于该面试者除了打游戏外没有别的爱好，C 语言也只是刚刚入门，没有太多可以问的，那么，这个人就 PASS 了吗？并没有，我接着开始问他：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;平时喜欢打哪个位置？ — 打野&lt;/li&gt;
&lt;li&gt;记得野怪的刷新时间吗？— 180S&lt;/li&gt;
&lt;li&gt;怎么平衡刷野和抓人？— 看兵线 xxxxxxx&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是一个比较极端也很有趣的例子，其实我们可以从回答中看到该面试者对于自己喜欢的东西是会去研究的，那我就觉得这是一种非常好的品质，甚至相比于那些说自己有某某基础，但其实只是看看教程，不求甚解的人，我觉得可能会更优秀一点，哪怕他现在 C 语言只是刚刚开始看我同样让他过了面试，虽然不记得这位同学后来怎么样了，但我相信如果他能对计算机感兴趣，也会发展的很好。这个例子并不是要大家听到面试者爱打游戏就猛猛追问，只是给大家一个参考，我们要&lt;strong&gt;仔细聆听&lt;/strong&gt;面试者的介绍，抓住他们感兴趣的点一直追问到自己想听的答案，而非按部就班的提问，会让我们收获更多。&lt;/p&gt;
&lt;h3 id=&#34;不要被面试者唬住&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不要被面试者唬住&#34;&gt;#&lt;/a&gt; 不要被面试者唬住&lt;/h3&gt;
&lt;p&gt;在面试中还发现一种情况，大概是因为技术栈不交叉的原因，面试者在说自己曾经的技术栈时大概率就是介绍一下就过了，我觉得这是非常可惜的，有技术栈的面试者会比没有技术栈的面试者更好面一些，这里我来说说我面的思路。&lt;/p&gt;
&lt;p&gt;首先，我需要确定面试者的这些技术栈到底是跟着教程按部就班的获取的，还是有一些自己的思考 / 研究在。举个例子，在某次面试中，某面试者介绍自己曾有过游戏破解的经历，于是我详细的问了他：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是什么游戏&lt;/li&gt;
&lt;li&gt;破解的过程是什么&lt;/li&gt;
&lt;li&gt;怎么学习破解的&lt;/li&gt;
&lt;li&gt;中间有没有遇见什么困难，是怎么解决的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事实上我只问到了第二个问题就结束了，因为面试者的回答是风灵月影，那么就没必要接着往下问了，而且这个经历也就是一般而已，没有太大的加分。&lt;/p&gt;
&lt;p&gt;「其实，有关游戏破解的知识我也了解的不多，这个时候可以多听面试者讲的东西，我们只需对于逻辑有问题或者讲的不清楚的地方发问就可以了，换个角度看，如果面试者能很清楚的跟面试官讲清楚技术原理，那么其本身就是一个很优秀的面试者了，不是吗？所以，千万不要被面试者唬住」&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结一下&lt;/strong&gt;，我们在面试有技术背景的面试者时，需要通过更加具体的问题在分清楚该面试者对于该技术，到底是简单的跟着教程走，还是自己有所思考 / 研究，然后在回答中去甄别这个人到底是一个有自驱有思考的优秀者，还是只是一个就还好的普通面试者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;另外&lt;/strong&gt;，其实我个人是很喜欢这种问问题的模式的，我在面试中就会经常以这样的方式去询问面试者，个人觉得这是一种很好的问问题的思路，既可以让面试者在熟悉的领域回答问题，还很容易看出面试者的综合素质，也推荐给大家。&lt;/p&gt;
&lt;h2 id=&#34;问题应是引导而非否定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题应是引导而非否定&#34;&gt;#&lt;/a&gt; 问题应是引导而非否定&lt;/h2&gt;
&lt;p&gt;在旁听中，面试官问问题后，如果面试者没有非常快的准确回答，往往会被面试官打断，然后以 “下去再了解了解吧” 结束。我个人觉得这样的问题是无效问题，白白浪费时间。我们一定要明确，我们问问题的过程应该是引导的过程，而非挑刺的过程。通过引导来让面试者回答出问题，或者至少能暴露面试者的思考过程，这道题才是有意义的。如果一味否定，不仅会让面试者紧张以至难以发挥，而且根本难以获取对于面试者的有效评价。&lt;/p&gt;
&lt;p&gt;这一点是有学弟做的比较好的，例如在问字母大小写转换的题目时，会提示 ASCII 码表。可能有些人会觉得前置知识太简单无需引导，其实不是这样的，&lt;strong&gt;引导的过程也是我们梳理自己的知识体系的过程&lt;/strong&gt;，一个知识体系不清楚的人是无法做出有效引导的。在引导的过程中，我们强迫自己梳理所学的知识，将「基础」、「结果」通过清晰的逻辑串联起来，你才能做出准确的引导，所以，何不测试测试自己到底有没有梳理好自己的知识体系呢？&lt;/p&gt;
&lt;h2 id=&#34;c语言知识点应注重基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言知识点应注重基础&#34;&gt;#&lt;/a&gt; C 语言知识点应注重基础&lt;/h2&gt;
&lt;p&gt;对于面试官而言，要对题目有如下三点反思：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;题目本身是否有非预期解，这道题自己到底搞清楚了吗？&lt;/li&gt;
&lt;li&gt;题目是否为基础问题，是否为面试者常规学习中自然掌握的问题（故意的偏 / 难题除外）？&lt;/li&gt;
&lt;li&gt;自己是否准备了充分的引导？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有一种极其不应该的情况但是历史上发生过， &lt;code&gt;i++&lt;/code&gt;  和 &lt;code&gt;++i&lt;/code&gt;  的问题应该是我们面试的高频问题了，但是曾经出过一道题目，由于没有考虑到不同平台编译器的优化问题，导致其实是有非预期解的，幸好面试的时候我在场，没有闹笑话。虽然不要求面试官在出题时对于 C 语言、编译器优化、操作系统有充分的了解，但是至少应该保证代码是能跑通的，且答案与实际执行结果是一致的。&lt;/p&gt;
&lt;p&gt;如果题目本身就非面试者自然掌握的范围，那么问题本身的价值就不是很大，如果是故意为之，那么该有的引导到位了吗？我们要明确一点：偏题如果有充分的引导，可以考察到面试者的逻辑思维能力；但如果没有引导，那就是废题。&lt;/p&gt;
&lt;h2 id=&#34;问题应清晰明确且不带明显的对错倾向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题应清晰明确且不带明显的对错倾向&#34;&gt;#&lt;/a&gt; 问题应清晰明确且不带明显的对错倾向&lt;/h2&gt;
&lt;p&gt;这里我直接给出一些问题实例对比，请大家仔细体会其中的差别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;原始问题&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;不好的点&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;变换问题&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果你室友在你做题时拉你去打游戏，你会怎么做？&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对错倾向太过明显&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;请问你怎么均衡技术时间、娱乐时间和社交时间？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;介绍一下数组吧&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;问题范围太大&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;请你介绍下数组怎么初始化 / 与字符串的区别 /......&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;你对科协有什么看法？&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;没问题&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;开放类问题是可以这样问的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们在问问题之前要先在脑中斟酌一下，这一点并不难做到，同样的问题，变换一下问法，就可能能问出你想要的答案了。&lt;/p&gt;
&lt;h2 id=&#34;不要随便问方向内问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不要随便问方向内问题&#34;&gt;#&lt;/a&gt; 不要随便问方向内问题&lt;/h2&gt;
&lt;p&gt;如果面试者没有表现出明显的对于某方面的兴趣，或是过往技术背景中没有明显的方向的背景，请不要突然就问某一个细分方向（前端 / 后端 / 产品 / 安全...），真的很奇怪诶！&lt;/p&gt;
&lt;h1 id=&#34;任务篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务篇&#34;&gt;#&lt;/a&gt; 任务篇&lt;/h1&gt;
&lt;p&gt;这一章表达的思想其实前面都有体现，这里单独拿出来再说一下也是因为非常重要，希望每一位面试官认真对待。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;留 Task 的依据&lt;/p&gt;
&lt;p&gt;正如上面说的，要&lt;strong&gt;根据不同的面试者来制定不同的面试策略和评价标准&lt;/strong&gt;，同理，对于不同的面试者留 Task 的多少也应该有所不同，例如：对于基础不牢的同学我们甚至可以不留更多 Task，让他把已经做过的 Task 好好复习也是可以的。对于每一类型的面试者，面试官都需要认真思考留 Task 的策略。&lt;/p&gt;
&lt;p&gt;在二面中，对于没有完成既定 Task 目标的面试者我们也要&lt;strong&gt;保持耐心&lt;/strong&gt;，认真的听他们说原因，同时也需要&lt;strong&gt;反思&lt;/strong&gt;我们留的 Task 的任务是否是合理的，其实对于大家目前的能力来说，&lt;strong&gt;偏离才是常态&lt;/strong&gt;，如果绝大部分人都按要求完成了 Task 任务，那么这时就要警惕是否可能是一些我们不希望看到的事情发生了，要进行更加认真的验证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;留任务应具体&lt;/p&gt;
&lt;p&gt;我们的面试官在面试过程中经常会说 “下去了解下” 这样的话，这一点本身没什么问题，但是如果不提示面试者下去应该了解 “什么” 知识，那就有可能导致问题了。&lt;/p&gt;
&lt;p&gt;例如我们问：如果创建一个超级大的数组可能产生什么问题？那么我们留任务的时候就要说：下去可以了解下栈溢出的知识。我们需要帮助面试者具体出需要了解的知识而不是只是一句 “下去了解下” 就完了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过以上两点在我晚上做了简单的面试复盘后，面试官已经有了很好的改变，&lt;strong&gt;特别棒！&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;制度篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#制度篇&#34;&gt;#&lt;/a&gt; 制度篇&lt;/h1&gt;
&lt;p&gt;本章就是一些简单的面试制度上的建议了，经验性的东西就写的比较简略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间把控&lt;/p&gt;
&lt;p&gt;建议&lt;strong&gt;以 30 分钟为区间&lt;/strong&gt;通知面试者等候面试，大概每一桌等待的人数保持在 2-3 人是比较合适的，既不会太耽误面试者时间，也可以应对一些面试者晚到等意外情况，更高效的利用时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;题目控制&lt;/p&gt;
&lt;p&gt;如果是多天 / 多场面试，建议准备&lt;strong&gt;多套题目&lt;/strong&gt;，防止因泄题导致的技术面失真。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;愿景与使命&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#愿景与使命&#34;&gt;#&lt;/a&gt; 愿景与使命&lt;/h1&gt;
&lt;p&gt;鲁迅先生曾说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光。就令萤火一般，也可以在黑暗里发一点光，不必等候炬火。此后如竟没有炬火：我便是唯一的光。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;科技协会的愿景是帮助每一个热爱计算机、热爱技术的同学在技术的大海中遨游；SIPC 作为一个学生组织，使命是帮助整个学院乃至学校的同学们提升技术水平。所以，&lt;strong&gt;面试不必过于严苛，培训不用过于保密&lt;/strong&gt;，如若能让每一位热爱技术的同学有所收获，那便是我们最大的成就。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://gality.cn/misc/trail-and-error/blog%E6%90%AD%E5%BB%BA/</guid>
            <title>blog搭建&amp;Hello world</title>
            <link>https://gality.cn/misc/trail-and-error/blog%E6%90%AD%E5%BB%BA/</link>
            <category term="杂项" scheme="https://gality.cn/categories/misc/" />
            <category term="踩坑" scheme="https://gality.cn/categories/misc/trail-and-error/" />
            <category term="杂项" scheme="https://gality.cn/tags/%E6%9D%82%E9%A1%B9/" />
            <category term="踩坑" scheme="https://gality.cn/tags/%E8%B8%A9%E5%9D%91/" />
            <pubDate>Mon, 14 Aug 2023 16:02:17 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note primary no-icon-with-header&#34;&gt;
&lt;h1 id=&#34;待踩坑项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#待踩坑项&#34;&gt;#&lt;/a&gt; &lt;ins class=&#34;danger&#34;&gt;待踩坑项&lt;/ins&gt;&lt;/h1&gt;
&lt;p&gt;🎉已经全部完成啦，后续将注重内容更新～🎉&lt;/p&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_0&#34;&gt; valine admin: 通过脚本&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0Rlc2VydHNQL1ZhbGluZS1BZG1pbi5naXQ=&#34;&gt;一键部署&lt;/span&gt;完成，&lt;s class=&#34;info&#34;&gt;模版自身有点小 bug，通过调试 JS 解决&lt;/s&gt; &lt;s class=&#34;danger&#34;&gt;其实不算 bug，本质是配置问题，修改完配置后就没有 bug 了&lt;/s&gt;  确实就是 bug，已经修复了 Orz&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_1&#34;&gt; 文章图片：七牛云 + 学生认证 + 图片压缩 + CDN 加速，目前图片加载速度较为满意&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_2&#34;&gt; 主题样式更改以更符合自己口味：已完成白天 &amp;amp; 黑夜两套色系的适配， 顺便推荐一下飞书，UI 配色真的很好抄 (博客白天模式的配色和本人命令行均是～)&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_3&#34;&gt; 默认图片：通过图传解决，plus：添加更多图片以减少随机的重复&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_4&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_4&#34;&gt; 主题特殊样式：&lt;span class=&#34;rainbow&#34;&gt;该页面已通过主题特殊样式复写～&lt;/span&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_5&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_5&#34;&gt; 主页精选分类实现：花费了半天成功实现，中间有些坑值得记录一下，详见：&lt;a href=&#34;https://gality.cn/misc/trail-and-error/blog%E6%90%AD%E5%BB%BA/#%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E6%AD%A3%E5%B8%B8%E4%BD%86%E9%83%A8%E7%BD%B2%E5%90%8E404&#34;&gt;这里&lt;/a&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_6&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_6&#34;&gt; Valine 表情源引入：使用了&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0dhbWVyTm9UaXRsZS9WYWxpbmUtTWFnaWM=&#34;&gt; Valine-Magic&lt;/span&gt; 的表情源来实现&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_7&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_7&#34;&gt; 主题样式 bug 修复：修复当标题在标签块中时样式重叠的 bug&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_8&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_8&#34;&gt; 主题样式功能新增：&lt;s&gt;新增对 front-matter 中 summary 字段的支持&lt;/s&gt;，使用 &lt;code&gt;excerpt&lt;/code&gt;  即可实现摘要编写工功能&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_9&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_9&#34;&gt; 主题样式功能修正：不知道是因为改动了哪里，导致文章中的超链接样式没有下滑线，通过对代码进行修正修复了这个问题。&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_10&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_10&#34;&gt; algolia: 申请完成并且在今天完成了配置，其中遇见一点点小坑 (配置原因)，很快便解决了&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2023.9.7 补&lt;/p&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_11&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_11&#34;&gt; MiniValine Bug 修复：页脚最新评论因多加 &lt;code&gt;/&lt;/code&gt;  导致无法正确跳转到文章评论，通过改变 MiniValine 解决了这个问题。&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_12&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_12&#34;&gt; 本地资源走 jsdeliver 进行 CDN 加速：速度提升巨大，真心感谢&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuanNkZWxpdnIuY29tLw==&#34;&gt; jsdelivr&lt;/span&gt; 这样的免费项目。&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id=&#34;blog-搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blog-搭建&#34;&gt;#&lt;/a&gt; Blog 搭建&lt;/h1&gt;
&lt;p&gt;无法白嫖阿里云 or 腾讯云的学生优惠后，用个人云服务器作为博客的花费属实有点不能承受，于是又回归了 &lt;code&gt;Github Pages + Hexo&lt;/code&gt;  的白嫖之路，途中踩到了诸多坑，这里稍微记录一下：&lt;/p&gt;
&lt;h2 id=&#34;主题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主题&#34;&gt;#&lt;/a&gt; 主题&lt;/h2&gt;
&lt;p&gt;逛&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy9pbmRleC5odG1s&#34;&gt; themes&lt;/span&gt; 的时候偶然看见了&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==&#34;&gt; ShoKa&lt;/span&gt; 主题，除了有点太过二次元外特效和布局还是很对我胃口的，唯一一点在于作者两年前就不更新了，看到最后一次更新时间时，我就意识到，安装之旅一定时会踩坑的...，咬咬牙，还是踩一遍吧&lt;/p&gt;
&lt;h2 id=&#34;node版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node版本&#34;&gt;#&lt;/a&gt; node 版本&lt;/h2&gt;
&lt;p&gt;作为一个两年前的项目，用最新 LTS 版本 18.17.1 果不其然会出问题，主要在于该项目所依赖的插件 &lt;code&gt;hexo-renderer-multi-markdown-it&lt;/code&gt;  中依赖了 &lt;code&gt;puppeteer&lt;/code&gt; ，在已经解决了网络问题的情况下，仍然会报一个错误：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;TypeError &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;ERR_INVALID_PROTOCOL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Protocol &lt;span class=&#34;token string&#34;&gt;&#34;https:&#34;&lt;/span&gt; not supported&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; Expected &lt;span class=&#34;token string&#34;&gt;&#34;http:&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最终解决方法为将 node 版本降至 12.x：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; n &lt;span class=&#34;token number&#34;&gt;12.22&lt;/span&gt;.12&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;deploy插件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy插件&#34;&gt;#&lt;/a&gt; deploy 插件&lt;/h2&gt;
&lt;p&gt;hexo 官方的 deploy 插件为： &lt;code&gt;hexo-deployer-git&lt;/code&gt; ，提供了一键部署功能，而官方文档给的不是特别详细，token 变量赋值为 github 的 access token 仍然无法认证成功，这里直接给出认证成功的配置：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//Your_Access_Token@github.com/&amp;lt;Name&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;/&amp;lt;Name&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;.github.io&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; main&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;包管理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#包管理器&#34;&gt;#&lt;/a&gt; 包管理器&lt;/h2&gt;
&lt;p&gt;不知道是不是因为 node 降级之后没有把 &lt;code&gt;yarn&lt;/code&gt;  降级的原因，当我用 &lt;code&gt;yarn add xxx&lt;/code&gt;  安装依赖后，再次使用 &lt;code&gt;hexo&lt;/code&gt;  指令时，会出现报错 &lt;code&gt;cannot find module &#39;hexo&#39;&lt;/code&gt; ，这里没有继续探究下去了，直接放弃 &lt;code&gt;yarn&lt;/code&gt; ，使用 &lt;code&gt;npm&lt;/code&gt;  就没有问题了。&lt;/p&gt;
&lt;h2 id=&#34;leancloud-valine&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leancloud-valine&#34;&gt;#&lt;/a&gt; LeanCloud + Valine&lt;/h2&gt;
&lt;p&gt;该主题默认支持了使用 &lt;code&gt;valine+LeanCloud&lt;/code&gt;  的方式实现无后端评论功能，有问题的地方在于 leanCloud 现在做了默认策略，无法通过默认地址进行访问，必须通过 &lt;code&gt;应用 -&amp;gt; 设置 -&amp;gt; 应用凭证 -&amp;gt; 域名白名单&lt;/code&gt; 中的 Request 域名进行访问，在 &lt;code&gt;_config.yaml&lt;/code&gt;  中的配置项中，必须在 &lt;code&gt;serverURLs&lt;/code&gt;  为上述域名 &lt;code&gt;xxxx.api.lncldglobal.com&lt;/code&gt;  才可以正常使用&lt;/p&gt;
&lt;h2 id=&#34;本地预览正常但部署后404&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地预览正常但部署后404&#34;&gt;#&lt;/a&gt; 本地预览正常但部署后 404&lt;/h2&gt;
&lt;p&gt;刚开始遇见这个问题是在实现分类图片时，图片就在 github 的仓库对应位置，但是加载页面时却 404，用英文搜了好久但其实没有搜到点上，这个问题的本质在于，默认 njk 模版在引用图片时使用的是绝对路径 &lt;code&gt;/MISC/cover.jpg&lt;/code&gt; ，本地没有问题，但是部署到 github 后会出现无法访问的情况，此时将模版更改为 &lt;code&gt;MISC/cover.jpg&lt;/code&gt;  即可，对我来说，问题的复杂在于，刚开始没有定位到问题，以为是 url 路径大小写的问题，所以就把 &lt;code&gt;MISC&lt;/code&gt;  改为了 &lt;code&gt;misc&lt;/code&gt; ，这有导致了新的问题，这个才是更值得记录。&lt;/p&gt;
&lt;p&gt;由于 URL 路径对于大小写是敏感的，所以如果服务器路径为 &lt;code&gt;http://xx.com/misc/cover.jpg&lt;/code&gt; ，那么此时，用 &lt;code&gt;http://xx.com/MISC/cover.jpg&lt;/code&gt;  是访问不到的，所以我在更改大小写后，仍然有 404 的问题，且此时，我注意到在本地的 public 文件夹中， &lt;code&gt;MISC&lt;/code&gt;  文件夹已经变为了 &lt;code&gt;misc&lt;/code&gt; ，但 &lt;code&gt;hexo d&lt;/code&gt;  后，github 仓库中仍然为 &lt;code&gt;MISC&lt;/code&gt; ，原因在于 git 本身是对大小写不敏感的，即 &lt;code&gt;MISC&lt;/code&gt;  和 &lt;code&gt;misc&lt;/code&gt;  对于 git 来说是一样的，而 hexo 本身又是差量更新，所以大小写的变动并没有记录更新，仍然用之前的大写版本，该问题的解决方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改 &lt;code&gt;&amp;lt;root&amp;gt;/.deploy_git/.git/config&lt;/code&gt;  文件，将 &lt;code&gt;gnorecase = true&lt;/code&gt;  改为 &lt;code&gt;false&lt;/code&gt;  (使得 git 对大小写敏感)&lt;/li&gt;
&lt;li&gt;删除 &lt;code&gt;&amp;lt;root&amp;gt;/.deploy_git&lt;/code&gt;  下的 &lt;code&gt;MISC&lt;/code&gt;  文件夹 (该文件夹内才是真正的 git 仓库)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo d&lt;/code&gt;  重新部署&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note warning no-icon&#34;&gt;
&lt;p&gt;PS：图片路径问题的本质其实是主题原本的写法是用了 jsdelivr 去加速静态资源的，当配置了 &lt;code&gt;statics&lt;/code&gt;  为 jsdelivr 地址时，资源加载不会出错，如果是配置为 &lt;code&gt;/&lt;/code&gt; ，则会存在上述问题。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;jsdelivr加速及刷新缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsdelivr加速及刷新缓存&#34;&gt;#&lt;/a&gt; Jsdelivr 加速及刷新缓存&lt;/h2&gt;
&lt;p&gt;对于 github 项目来说，配置 Jsdelivr 加速极其简单，直接将资源的访问链接替换成 CDN 链接即可，CDN 链接为：&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;//cdn.jsdelivr.net/gh/您的Github用户名/项目仓库名@版本/文件路径&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;例如，我自己改过的 MiniValine 的地址为：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0dhbGl0eTM2OS9NaW5pVmFsaW5l&#34;&gt;https://github.com/Gality369/MiniValine&lt;/span&gt; ，项目内的目录为 &lt;code&gt;dist/MiniValine.min.js&lt;/code&gt;  ，发布了一个 release 版本为 “v4.2.2-beta11”。&lt;/p&gt;
&lt;p&gt;那么我只需将地址替换为：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2dhbGl0eTM2OS9NaW5pVmFsaW5lQHY0LjIuMi1iZXRhMTEvZGlzdC9NaW5pVmFsaW5lLm1pbi5qcw==&#34;&gt;https://cdn.jsdelivr.net/gh/gality369/MiniValine@v4.2.2-beta11/dist/MiniValine.min.js&lt;/span&gt; 就可以让 jsdeliver 抓取我的 js 文件并通过 CDN 加速传给我。&lt;/p&gt;
&lt;p&gt;注意，这其中涉及到缓存问题，例如当我改变了上述 js 文件后，由于 jsdelivr 会存一份缓存文件便于加速获取过程，所以当我请求时可能只能获取老版本的 js，我们可以通过将 &lt;code&gt;cdn&lt;/code&gt;  换成 &lt;code&gt;purge&lt;/code&gt;  的方式来告诉 jsdelivr 重新获取文件并刷新缓存，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//刷新前&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;//cdn.jsdelivr.net/gh/gality369/MiniValine@v4.2.2-beta11/dist/MiniValine.min.js&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//强制刷新，返回 status: finished 代表刷新成功&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;//purge.jsdelivr.net/gh/gality369/MiniValine@v4.2.2-beta11/dist/MiniValine.min.js&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//重新访问即可&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;//cdn.jsdelivr.net/gh/gality369/MiniValine@v4.2.2-beta11/dist/MiniValine.min.js&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;jsdelivr 大幅提升了网站的访问速度，最重要的是免费！！！&lt;/p&gt;
&lt;p&gt;再次由衷感谢这样的项目🙏&lt;/p&gt;
&lt;h1 id=&#34;hello-world&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hello-world&#34;&gt;#&lt;/a&gt; Hello World&lt;/h1&gt;
&lt;p&gt;仔细算算搭建个人博客已经有过大概 7、8 次了，每次总是因为各种各样的原因，最终都荒废了，记录的笔记，分享的技术也都遗失了，确实也有点遗憾。&lt;/p&gt;
&lt;p&gt;本来计划等开学之后再重新搭博客来记录 &amp;amp; 激励自己，但是在认真看了&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ldGVybmFsc2FrdXJhMTMuY29tLw==&#34;&gt; Sakura 师傅&lt;/span&gt;的博客之后，大受震撼，几经思索之后，不禁问自己为什么要等到 10 几天后呢？为什么不能现在开始呢？于是，说做便做，今天便将诸多坑都踩了踩，产出了新博客的第一篇文章。&lt;/p&gt;
&lt;p&gt;博客将具体怎么发展，写那些内容，暂时还没有想好，但是一定会置顶一篇自己的每日进展作为激励，希望可以一直坚持下去，每天更新。&lt;/p&gt;
&lt;p&gt;末了，写一句激励自己的话吧！&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;泰山之管穿石，单极之绠断干。水非石之钻，索非木之锯，渐靡使之然也&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
    </channel>
</rss>
